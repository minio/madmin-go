package madmin

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CatalogDataFile) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "size":
			z.Size, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "MD5Checksum":
			z.MD5Checksum, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MD5Checksum")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CatalogDataFile) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "key"
	err = en.Append(0x83, 0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "size"
	err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "MD5Checksum"
	err = en.Append(0xab, 0x4d, 0x44, 0x35, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteString(z.MD5Checksum)
	if err != nil {
		err = msgp.WrapError(err, "MD5Checksum")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CatalogDataFile) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "key"
	o = append(o, 0x83, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "size"
	o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendUint64(o, z.Size)
	// string "MD5Checksum"
	o = append(o, 0xab, 0x4d, 0x44, 0x35, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
	o = msgp.AppendString(o, z.MD5Checksum)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatalogDataFile) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "size":
			z.Size, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "MD5Checksum":
			z.MD5Checksum, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MD5Checksum")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CatalogDataFile) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 5 + msgp.Uint64Size + 12 + msgp.StringPrefixSize + len(z.MD5Checksum)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CatalogManifest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sourceBucket":
			z.SourceBucket, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SourceBucket")
				return
			}
		case "destinationBucket":
			z.DestinationBucket, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DestinationBucket")
				return
			}
		case "version":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Version")
					return
				}
				z.Version = CatalogManifestVersion(zb0002)
			}
		case "creationTimestamp":
			z.CreationTimestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CreationTimestamp")
				return
			}
		case "fileFormat":
			z.FileFormat, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FileFormat")
				return
			}
		case "fileSchema":
			z.FileSchema, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FileSchema")
				return
			}
		case "files":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if cap(z.Files) >= int(zb0003) {
				z.Files = (z.Files)[:zb0003]
			} else {
				z.Files = make([]CatalogDataFile, zb0003)
			}
			for za0001 := range z.Files {
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Files", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "key":
						z.Files[za0001].Key, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001, "Key")
							return
						}
					case "size":
						z.Files[za0001].Size, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001, "Size")
							return
						}
					case "MD5Checksum":
						z.Files[za0001].MD5Checksum, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001, "MD5Checksum")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CatalogManifest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "sourceBucket"
	err = en.Append(0x87, 0xac, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.SourceBucket)
	if err != nil {
		err = msgp.WrapError(err, "SourceBucket")
		return
	}
	// write "destinationBucket"
	err = en.Append(0xb1, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.DestinationBucket)
	if err != nil {
		err = msgp.WrapError(err, "DestinationBucket")
		return
	}
	// write "version"
	err = en.Append(0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.Version))
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "creationTimestamp"
	err = en.Append(0xb1, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.CreationTimestamp)
	if err != nil {
		err = msgp.WrapError(err, "CreationTimestamp")
		return
	}
	// write "fileFormat"
	err = en.Append(0xaa, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.FileFormat)
	if err != nil {
		err = msgp.WrapError(err, "FileFormat")
		return
	}
	// write "fileSchema"
	err = en.Append(0xaa, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.FileSchema)
	if err != nil {
		err = msgp.WrapError(err, "FileSchema")
		return
	}
	// write "files"
	err = en.Append(0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Files)))
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	for za0001 := range z.Files {
		// map header, size 3
		// write "key"
		err = en.Append(0x83, 0xa3, 0x6b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.Files[za0001].Key)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001, "Key")
			return
		}
		// write "size"
		err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Files[za0001].Size)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001, "Size")
			return
		}
		// write "MD5Checksum"
		err = en.Append(0xab, 0x4d, 0x44, 0x35, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteString(z.Files[za0001].MD5Checksum)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001, "MD5Checksum")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CatalogManifest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "sourceBucket"
	o = append(o, 0x87, 0xac, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	o = msgp.AppendString(o, z.SourceBucket)
	// string "destinationBucket"
	o = append(o, 0xb1, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	o = msgp.AppendString(o, z.DestinationBucket)
	// string "version"
	o = append(o, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, string(z.Version))
	// string "creationTimestamp"
	o = append(o, 0xb1, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.CreationTimestamp)
	// string "fileFormat"
	o = append(o, 0xaa, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	o = msgp.AppendString(o, z.FileFormat)
	// string "fileSchema"
	o = append(o, 0xaa, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61)
	o = msgp.AppendString(o, z.FileSchema)
	// string "files"
	o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Files)))
	for za0001 := range z.Files {
		// map header, size 3
		// string "key"
		o = append(o, 0x83, 0xa3, 0x6b, 0x65, 0x79)
		o = msgp.AppendString(o, z.Files[za0001].Key)
		// string "size"
		o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
		o = msgp.AppendUint64(o, z.Files[za0001].Size)
		// string "MD5Checksum"
		o = append(o, 0xab, 0x4d, 0x44, 0x35, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
		o = msgp.AppendString(o, z.Files[za0001].MD5Checksum)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatalogManifest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sourceBucket":
			z.SourceBucket, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceBucket")
				return
			}
		case "destinationBucket":
			z.DestinationBucket, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DestinationBucket")
				return
			}
		case "version":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Version")
					return
				}
				z.Version = CatalogManifestVersion(zb0002)
			}
		case "creationTimestamp":
			z.CreationTimestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreationTimestamp")
				return
			}
		case "fileFormat":
			z.FileFormat, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FileFormat")
				return
			}
		case "fileSchema":
			z.FileSchema, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FileSchema")
				return
			}
		case "files":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if cap(z.Files) >= int(zb0003) {
				z.Files = (z.Files)[:zb0003]
			} else {
				z.Files = make([]CatalogDataFile, zb0003)
			}
			for za0001 := range z.Files {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Files", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "key":
						z.Files[za0001].Key, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001, "Key")
							return
						}
					case "size":
						z.Files[za0001].Size, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001, "Size")
							return
						}
					case "MD5Checksum":
						z.Files[za0001].MD5Checksum, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001, "MD5Checksum")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Files", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CatalogManifest) Msgsize() (s int) {
	s = 1 + 13 + msgp.StringPrefixSize + len(z.SourceBucket) + 18 + msgp.StringPrefixSize + len(z.DestinationBucket) + 8 + msgp.StringPrefixSize + len(string(z.Version)) + 18 + msgp.StringPrefixSize + len(z.CreationTimestamp) + 11 + msgp.StringPrefixSize + len(z.FileFormat) + 11 + msgp.StringPrefixSize + len(z.FileSchema) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Files {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.Files[za0001].Key) + 5 + msgp.Uint64Size + 12 + msgp.StringPrefixSize + len(z.Files[za0001].MD5Checksum)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CatalogManifestVersion) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CatalogManifestVersion(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CatalogManifestVersion) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CatalogManifestVersion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CatalogManifestVersion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CatalogManifestVersion(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CatalogManifestVersion) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}
