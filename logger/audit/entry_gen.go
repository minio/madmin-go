// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package audit

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Entry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint32 /* 17 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "deploymentid":
			z.DeploymentID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
			zb0001Mask |= 0x1
		case "siteName":
			z.SiteName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SiteName")
				return
			}
			zb0001Mask |= 0x2
		case "time":
			z.Time, err = dc.ReadTimeUTC()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "event":
			z.Event, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
			zb0001Mask |= 0x4
		case "trigger":
			z.Trigger, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Trigger")
				return
			}
		case "api":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "API")
				return
			}
			var zb0002Mask uint16 /* 11 bits */
			_ = zb0002Mask
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "API")
					return
				}
				switch msgp.UnsafeString(field) {
				case "name":
					z.API.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "Name")
						return
					}
					zb0002Mask |= 0x1
				case "bucket":
					z.API.Bucket, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "Bucket")
						return
					}
					zb0002Mask |= 0x2
				case "object":
					z.API.Object, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "Object")
						return
					}
					zb0002Mask |= 0x4
				case "objects":
					var zb0003 uint32
					zb0003, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "API", "Objects")
						return
					}
					if cap(z.API.Objects) >= int(zb0003) {
						z.API.Objects = (z.API.Objects)[:zb0003]
					} else {
						z.API.Objects = make([]ObjectVersion, zb0003)
					}
					for za0001 := range z.API.Objects {
						var zb0004 uint32
						zb0004, err = dc.ReadMapHeader()
						if err != nil {
							err = msgp.WrapError(err, "API", "Objects", za0001)
							return
						}
						var zb0004Mask uint8 /* 1 bits */
						_ = zb0004Mask
						for zb0004 > 0 {
							zb0004--
							field, err = dc.ReadMapKeyPtr()
							if err != nil {
								err = msgp.WrapError(err, "API", "Objects", za0001)
								return
							}
							switch msgp.UnsafeString(field) {
							case "objectName":
								z.API.Objects[za0001].ObjectName, err = dc.ReadString()
								if err != nil {
									err = msgp.WrapError(err, "API", "Objects", za0001, "ObjectName")
									return
								}
							case "versionId":
								z.API.Objects[za0001].VersionID, err = dc.ReadString()
								if err != nil {
									err = msgp.WrapError(err, "API", "Objects", za0001, "VersionID")
									return
								}
								zb0004Mask |= 0x1
							default:
								err = dc.Skip()
								if err != nil {
									err = msgp.WrapError(err, "API", "Objects", za0001)
									return
								}
							}
						}
						// Clear omitted fields.
						if (zb0004Mask & 0x1) == 0 {
							z.API.Objects[za0001].VersionID = ""
						}

					}
					zb0002Mask |= 0x8
				case "status":
					z.API.Status, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "Status")
						return
					}
					zb0002Mask |= 0x10
				case "statusCode":
					z.API.StatusCode, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "API", "StatusCode")
						return
					}
					zb0002Mask |= 0x20
				case "rx":
					z.API.InputBytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "API", "InputBytes")
						return
					}
				case "tx":
					z.API.OutputBytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "API", "OutputBytes")
						return
					}
				case "txHeaders":
					z.API.HeaderBytes, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "API", "HeaderBytes")
						return
					}
					zb0002Mask |= 0x40
				case "timeToFirstByte":
					z.API.TimeToFirstByte, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToFirstByte")
						return
					}
					zb0002Mask |= 0x80
				case "timeToFirstByteInNS":
					z.API.TimeToFirstByteInNS, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToFirstByteInNS")
						return
					}
					zb0002Mask |= 0x100
				case "timeToResponse":
					z.API.TimeToResponse, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToResponse")
						return
					}
					zb0002Mask |= 0x200
				case "timeToResponseInNS":
					z.API.TimeToResponseInNS, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToResponseInNS")
						return
					}
					zb0002Mask |= 0x400
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "API")
						return
					}
				}
			}
			// Clear omitted fields.
			if zb0002Mask != 0x7ff {
				if (zb0002Mask & 0x1) == 0 {
					z.API.Name = ""
				}
				if (zb0002Mask & 0x2) == 0 {
					z.API.Bucket = ""
				}
				if (zb0002Mask & 0x4) == 0 {
					z.API.Object = ""
				}
				if (zb0002Mask & 0x8) == 0 {
					z.API.Objects = nil
				}
				if (zb0002Mask & 0x10) == 0 {
					z.API.Status = ""
				}
				if (zb0002Mask & 0x20) == 0 {
					z.API.StatusCode = 0
				}
				if (zb0002Mask & 0x40) == 0 {
					z.API.HeaderBytes = 0
				}
				if (zb0002Mask & 0x80) == 0 {
					z.API.TimeToFirstByte = ""
				}
				if (zb0002Mask & 0x100) == 0 {
					z.API.TimeToFirstByteInNS = ""
				}
				if (zb0002Mask & 0x200) == 0 {
					z.API.TimeToResponse = ""
				}
				if (zb0002Mask & 0x400) == 0 {
					z.API.TimeToResponseInNS = ""
				}
			}
		case "remotehost":
			z.RemoteHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RemoteHost")
				return
			}
			zb0001Mask |= 0x8
		case "requestID":
			z.RequestID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
			zb0001Mask |= 0x10
		case "userAgent":
			z.UserAgent, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
			zb0001Mask |= 0x20
		case "requestPath":
			z.ReqPath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqPath")
				return
			}
			zb0001Mask |= 0x40
		case "requestHost":
			z.ReqHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
			zb0001Mask |= 0x80
		case "requestNode":
			z.ReqNode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqNode")
				return
			}
			zb0001Mask |= 0x100
		case "requestClaims":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			if z.ReqClaims == nil {
				z.ReqClaims = make(map[string]interface{}, zb0005)
			} else if len(z.ReqClaims) > 0 {
				clear(z.ReqClaims)
			}
			for zb0005 > 0 {
				zb0005--
				var za0002 string
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				var za0003 interface{}
				za0003, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0002)
					return
				}
				z.ReqClaims[za0002] = za0003
			}
			zb0001Mask |= 0x200
		case "requestQuery":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqQuery")
				return
			}
			if z.ReqQuery == nil {
				z.ReqQuery = make(map[string]string, zb0006)
			} else if len(z.ReqQuery) > 0 {
				clear(z.ReqQuery)
			}
			for zb0006 > 0 {
				zb0006--
				var za0004 string
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery")
					return
				}
				var za0005 string
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery", za0004)
					return
				}
				z.ReqQuery[za0004] = za0005
			}
			zb0001Mask |= 0x400
		case "requestHeader":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqHeader")
				return
			}
			if z.ReqHeader == nil {
				z.ReqHeader = make(map[string]string, zb0007)
			} else if len(z.ReqHeader) > 0 {
				clear(z.ReqHeader)
			}
			for zb0007 > 0 {
				zb0007--
				var za0006 string
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader")
					return
				}
				var za0007 string
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader", za0006)
					return
				}
				z.ReqHeader[za0006] = za0007
			}
			zb0001Mask |= 0x800
		case "responseHeader":
			var zb0008 uint32
			zb0008, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "RespHeader")
				return
			}
			if z.RespHeader == nil {
				z.RespHeader = make(map[string]string, zb0008)
			} else if len(z.RespHeader) > 0 {
				clear(z.RespHeader)
			}
			for zb0008 > 0 {
				zb0008--
				var za0008 string
				za0008, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RespHeader")
					return
				}
				var za0009 string
				za0009, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RespHeader", za0008)
					return
				}
				z.RespHeader[za0008] = za0009
			}
			zb0001Mask |= 0x1000
		case "tags":
			var zb0009 uint32
			zb0009, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]interface{}, zb0009)
			} else if len(z.Tags) > 0 {
				clear(z.Tags)
			}
			for zb0009 > 0 {
				zb0009--
				var za0010 string
				za0010, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				var za0011 interface{}
				za0011, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0010)
					return
				}
				z.Tags[za0010] = za0011
			}
			zb0001Mask |= 0x2000
		case "accessKey":
			z.AccessKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
			zb0001Mask |= 0x4000
		case "parentUser":
			z.ParentUser, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
			zb0001Mask |= 0x8000
		case "error":
			z.Error, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
			zb0001Mask |= 0x10000
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1ffff {
		if (zb0001Mask & 0x1) == 0 {
			z.DeploymentID = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.SiteName = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Type = ""
		}
		if (zb0001Mask & 0x8) == 0 {
			z.RemoteHost = ""
		}
		if (zb0001Mask & 0x10) == 0 {
			z.RequestID = ""
		}
		if (zb0001Mask & 0x20) == 0 {
			z.UserAgent = ""
		}
		if (zb0001Mask & 0x40) == 0 {
			z.ReqPath = ""
		}
		if (zb0001Mask & 0x80) == 0 {
			z.ReqHost = ""
		}
		if (zb0001Mask & 0x100) == 0 {
			z.ReqNode = ""
		}
		if (zb0001Mask & 0x200) == 0 {
			z.ReqClaims = nil
		}
		if (zb0001Mask & 0x400) == 0 {
			z.ReqQuery = nil
		}
		if (zb0001Mask & 0x800) == 0 {
			z.ReqHeader = nil
		}
		if (zb0001Mask & 0x1000) == 0 {
			z.RespHeader = nil
		}
		if (zb0001Mask & 0x2000) == 0 {
			z.Tags = nil
		}
		if (zb0001Mask & 0x4000) == 0 {
			z.AccessKey = ""
		}
		if (zb0001Mask & 0x8000) == 0 {
			z.ParentUser = ""
		}
		if (zb0001Mask & 0x10000) == 0 {
			z.Error = ""
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Entry) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(22)
	var zb0001Mask uint32 /* 22 bits */
	_ = zb0001Mask
	if z.DeploymentID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.SiteName == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Type == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.RemoteHost == "" {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.RequestID == "" {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.UserAgent == "" {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.ReqPath == "" {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.ReqHost == "" {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.ReqNode == "" {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.ReqClaims == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.ReqQuery == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.ReqHeader == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.RespHeader == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.Tags == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.AccessKey == "" {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.ParentUser == "" {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.Error == "" {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "version"
		err = en.Append(0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteString(z.Version)
		if err != nil {
			err = msgp.WrapError(err, "Version")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "deploymentid"
			err = en.Append(0xac, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.DeploymentID)
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "siteName"
			err = en.Append(0xa8, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.SiteName)
			if err != nil {
				err = msgp.WrapError(err, "SiteName")
				return
			}
		}
		// write "time"
		err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteTime(z.Time)
		if err != nil {
			err = msgp.WrapError(err, "Time")
			return
		}
		// write "event"
		err = en.Append(0xa5, 0x65, 0x76, 0x65, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteString(z.Event)
		if err != nil {
			err = msgp.WrapError(err, "Event")
			return
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "type"
			err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Type)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		}
		// write "trigger"
		err = en.Append(0xa7, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteString(z.Trigger)
		if err != nil {
			err = msgp.WrapError(err, "Trigger")
			return
		}
		// write "api"
		err = en.Append(0xa3, 0x61, 0x70, 0x69)
		if err != nil {
			return
		}
		// check for omitted fields
		zb0002Len := uint32(13)
		var zb0002Mask uint16 /* 13 bits */
		_ = zb0002Mask
		if z.API.Name == "" {
			zb0002Len--
			zb0002Mask |= 0x1
		}
		if z.API.Bucket == "" {
			zb0002Len--
			zb0002Mask |= 0x2
		}
		if z.API.Object == "" {
			zb0002Len--
			zb0002Mask |= 0x4
		}
		if z.API.Objects == nil {
			zb0002Len--
			zb0002Mask |= 0x8
		}
		if z.API.Status == "" {
			zb0002Len--
			zb0002Mask |= 0x10
		}
		if z.API.StatusCode == 0 {
			zb0002Len--
			zb0002Mask |= 0x20
		}
		if z.API.HeaderBytes == 0 {
			zb0002Len--
			zb0002Mask |= 0x100
		}
		if z.API.TimeToFirstByte == "" {
			zb0002Len--
			zb0002Mask |= 0x200
		}
		if z.API.TimeToFirstByteInNS == "" {
			zb0002Len--
			zb0002Mask |= 0x400
		}
		if z.API.TimeToResponse == "" {
			zb0002Len--
			zb0002Mask |= 0x800
		}
		if z.API.TimeToResponseInNS == "" {
			zb0002Len--
			zb0002Mask |= 0x1000
		}
		// variable map header, size zb0002Len
		err = en.Append(0x80 | uint8(zb0002Len))
		if err != nil {
			return
		}

		// skip if no fields are to be emitted
		if zb0002Len != 0 {
			if (zb0002Mask & 0x1) == 0 { // if not omitted
				// write "name"
				err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.Name)
				if err != nil {
					err = msgp.WrapError(err, "API", "Name")
					return
				}
			}
			if (zb0002Mask & 0x2) == 0 { // if not omitted
				// write "bucket"
				err = en.Append(0xa6, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.Bucket)
				if err != nil {
					err = msgp.WrapError(err, "API", "Bucket")
					return
				}
			}
			if (zb0002Mask & 0x4) == 0 { // if not omitted
				// write "object"
				err = en.Append(0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.Object)
				if err != nil {
					err = msgp.WrapError(err, "API", "Object")
					return
				}
			}
			if (zb0002Mask & 0x8) == 0 { // if not omitted
				// write "objects"
				err = en.Append(0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
				if err != nil {
					return
				}
				err = en.WriteArrayHeader(uint32(len(z.API.Objects)))
				if err != nil {
					err = msgp.WrapError(err, "API", "Objects")
					return
				}
				for za0001 := range z.API.Objects {
					// check for omitted fields
					zb0003Len := uint32(2)
					var zb0003Mask uint8 /* 2 bits */
					_ = zb0003Mask
					if z.API.Objects[za0001].VersionID == "" {
						zb0003Len--
						zb0003Mask |= 0x2
					}
					// variable map header, size zb0003Len
					err = en.Append(0x80 | uint8(zb0003Len))
					if err != nil {
						return
					}

					// skip if no fields are to be emitted
					if zb0003Len != 0 {
						// write "objectName"
						err = en.Append(0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
						if err != nil {
							return
						}
						err = en.WriteString(z.API.Objects[za0001].ObjectName)
						if err != nil {
							err = msgp.WrapError(err, "API", "Objects", za0001, "ObjectName")
							return
						}
						if (zb0003Mask & 0x2) == 0 { // if not omitted
							// write "versionId"
							err = en.Append(0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
							if err != nil {
								return
							}
							err = en.WriteString(z.API.Objects[za0001].VersionID)
							if err != nil {
								err = msgp.WrapError(err, "API", "Objects", za0001, "VersionID")
								return
							}
						}
					}
				}
			}
			if (zb0002Mask & 0x10) == 0 { // if not omitted
				// write "status"
				err = en.Append(0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.Status)
				if err != nil {
					err = msgp.WrapError(err, "API", "Status")
					return
				}
			}
			if (zb0002Mask & 0x20) == 0 { // if not omitted
				// write "statusCode"
				err = en.Append(0xaa, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
				if err != nil {
					return
				}
				err = en.WriteInt(z.API.StatusCode)
				if err != nil {
					err = msgp.WrapError(err, "API", "StatusCode")
					return
				}
			}
			// write "rx"
			err = en.Append(0xa2, 0x72, 0x78)
			if err != nil {
				return
			}
			err = en.WriteInt64(z.API.InputBytes)
			if err != nil {
				err = msgp.WrapError(err, "API", "InputBytes")
				return
			}
			// write "tx"
			err = en.Append(0xa2, 0x74, 0x78)
			if err != nil {
				return
			}
			err = en.WriteInt64(z.API.OutputBytes)
			if err != nil {
				err = msgp.WrapError(err, "API", "OutputBytes")
				return
			}
			if (zb0002Mask & 0x100) == 0 { // if not omitted
				// write "txHeaders"
				err = en.Append(0xa9, 0x74, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
				if err != nil {
					return
				}
				err = en.WriteInt64(z.API.HeaderBytes)
				if err != nil {
					err = msgp.WrapError(err, "API", "HeaderBytes")
					return
				}
			}
			if (zb0002Mask & 0x200) == 0 { // if not omitted
				// write "timeToFirstByte"
				err = en.Append(0xaf, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.TimeToFirstByte)
				if err != nil {
					err = msgp.WrapError(err, "API", "TimeToFirstByte")
					return
				}
			}
			if (zb0002Mask & 0x400) == 0 { // if not omitted
				// write "timeToFirstByteInNS"
				err = en.Append(0xb3, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x49, 0x6e, 0x4e, 0x53)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.TimeToFirstByteInNS)
				if err != nil {
					err = msgp.WrapError(err, "API", "TimeToFirstByteInNS")
					return
				}
			}
			if (zb0002Mask & 0x800) == 0 { // if not omitted
				// write "timeToResponse"
				err = en.Append(0xae, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.TimeToResponse)
				if err != nil {
					err = msgp.WrapError(err, "API", "TimeToResponse")
					return
				}
			}
			if (zb0002Mask & 0x1000) == 0 { // if not omitted
				// write "timeToResponseInNS"
				err = en.Append(0xb2, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x53)
				if err != nil {
					return
				}
				err = en.WriteString(z.API.TimeToResponseInNS)
				if err != nil {
					err = msgp.WrapError(err, "API", "TimeToResponseInNS")
					return
				}
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// write "remotehost"
			err = en.Append(0xaa, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x68, 0x6f, 0x73, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.RemoteHost)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHost")
				return
			}
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// write "requestID"
			err = en.Append(0xa9, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
			if err != nil {
				return
			}
			err = en.WriteString(z.RequestID)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// write "userAgent"
			err = en.Append(0xa9, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.UserAgent)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// write "requestPath"
			err = en.Append(0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68)
			if err != nil {
				return
			}
			err = en.WriteString(z.ReqPath)
			if err != nil {
				err = msgp.WrapError(err, "ReqPath")
				return
			}
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// write "requestHost"
			err = en.Append(0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.ReqHost)
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// write "requestNode"
			err = en.Append(0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.ReqNode)
			if err != nil {
				err = msgp.WrapError(err, "ReqNode")
				return
			}
		}
		if (zb0001Mask & 0x4000) == 0 { // if not omitted
			// write "requestClaims"
			err = en.Append(0xad, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.ReqClaims)))
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			for za0002, za0003 := range z.ReqClaims {
				err = en.WriteString(za0002)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				err = en.WriteIntf(za0003)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0002)
					return
				}
			}
		}
		if (zb0001Mask & 0x8000) == 0 { // if not omitted
			// write "requestQuery"
			err = en.Append(0xac, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.ReqQuery)))
			if err != nil {
				err = msgp.WrapError(err, "ReqQuery")
				return
			}
			for za0004, za0005 := range z.ReqQuery {
				err = en.WriteString(za0004)
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery")
					return
				}
				err = en.WriteString(za0005)
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery", za0004)
					return
				}
			}
		}
		if (zb0001Mask & 0x10000) == 0 { // if not omitted
			// write "requestHeader"
			err = en.Append(0xad, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.ReqHeader)))
			if err != nil {
				err = msgp.WrapError(err, "ReqHeader")
				return
			}
			for za0006, za0007 := range z.ReqHeader {
				err = en.WriteString(za0006)
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader")
					return
				}
				err = en.WriteString(za0007)
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader", za0006)
					return
				}
			}
		}
		if (zb0001Mask & 0x20000) == 0 { // if not omitted
			// write "responseHeader"
			err = en.Append(0xae, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.RespHeader)))
			if err != nil {
				err = msgp.WrapError(err, "RespHeader")
				return
			}
			for za0008, za0009 := range z.RespHeader {
				err = en.WriteString(za0008)
				if err != nil {
					err = msgp.WrapError(err, "RespHeader")
					return
				}
				err = en.WriteString(za0009)
				if err != nil {
					err = msgp.WrapError(err, "RespHeader", za0008)
					return
				}
			}
		}
		if (zb0001Mask & 0x40000) == 0 { // if not omitted
			// write "tags"
			err = en.Append(0xa4, 0x74, 0x61, 0x67, 0x73)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.Tags)))
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			for za0010, za0011 := range z.Tags {
				err = en.WriteString(za0010)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				err = en.WriteIntf(za0011)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0010)
					return
				}
			}
		}
		if (zb0001Mask & 0x80000) == 0 { // if not omitted
			// write "accessKey"
			err = en.Append(0xa9, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
			if err != nil {
				return
			}
			err = en.WriteString(z.AccessKey)
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		}
		if (zb0001Mask & 0x100000) == 0 { // if not omitted
			// write "parentUser"
			err = en.Append(0xaa, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72)
			if err != nil {
				return
			}
			err = en.WriteString(z.ParentUser)
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
		}
		if (zb0001Mask & 0x200000) == 0 { // if not omitted
			// write "error"
			err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
			if err != nil {
				return
			}
			err = en.WriteString(z.Error)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Entry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(22)
	var zb0001Mask uint32 /* 22 bits */
	_ = zb0001Mask
	if z.DeploymentID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.SiteName == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Type == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.RemoteHost == "" {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.RequestID == "" {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.UserAgent == "" {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.ReqPath == "" {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.ReqHost == "" {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.ReqNode == "" {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.ReqClaims == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.ReqQuery == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.ReqHeader == nil {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	if z.RespHeader == nil {
		zb0001Len--
		zb0001Mask |= 0x20000
	}
	if z.Tags == nil {
		zb0001Len--
		zb0001Mask |= 0x40000
	}
	if z.AccessKey == "" {
		zb0001Len--
		zb0001Mask |= 0x80000
	}
	if z.ParentUser == "" {
		zb0001Len--
		zb0001Mask |= 0x100000
	}
	if z.Error == "" {
		zb0001Len--
		zb0001Mask |= 0x200000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "version"
		o = append(o, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendString(o, z.Version)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "deploymentid"
			o = append(o, 0xac, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64)
			o = msgp.AppendString(o, z.DeploymentID)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "siteName"
			o = append(o, 0xa8, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65)
			o = msgp.AppendString(o, z.SiteName)
		}
		// string "time"
		o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
		o = msgp.AppendTime(o, z.Time)
		// string "event"
		o = append(o, 0xa5, 0x65, 0x76, 0x65, 0x6e, 0x74)
		o = msgp.AppendString(o, z.Event)
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "type"
			o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendString(o, z.Type)
		}
		// string "trigger"
		o = append(o, 0xa7, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72)
		o = msgp.AppendString(o, z.Trigger)
		// string "api"
		o = append(o, 0xa3, 0x61, 0x70, 0x69)
		// check for omitted fields
		zb0002Len := uint32(13)
		var zb0002Mask uint16 /* 13 bits */
		_ = zb0002Mask
		if z.API.Name == "" {
			zb0002Len--
			zb0002Mask |= 0x1
		}
		if z.API.Bucket == "" {
			zb0002Len--
			zb0002Mask |= 0x2
		}
		if z.API.Object == "" {
			zb0002Len--
			zb0002Mask |= 0x4
		}
		if z.API.Objects == nil {
			zb0002Len--
			zb0002Mask |= 0x8
		}
		if z.API.Status == "" {
			zb0002Len--
			zb0002Mask |= 0x10
		}
		if z.API.StatusCode == 0 {
			zb0002Len--
			zb0002Mask |= 0x20
		}
		if z.API.HeaderBytes == 0 {
			zb0002Len--
			zb0002Mask |= 0x100
		}
		if z.API.TimeToFirstByte == "" {
			zb0002Len--
			zb0002Mask |= 0x200
		}
		if z.API.TimeToFirstByteInNS == "" {
			zb0002Len--
			zb0002Mask |= 0x400
		}
		if z.API.TimeToResponse == "" {
			zb0002Len--
			zb0002Mask |= 0x800
		}
		if z.API.TimeToResponseInNS == "" {
			zb0002Len--
			zb0002Mask |= 0x1000
		}
		// variable map header, size zb0002Len
		o = append(o, 0x80|uint8(zb0002Len))

		// skip if no fields are to be emitted
		if zb0002Len != 0 {
			if (zb0002Mask & 0x1) == 0 { // if not omitted
				// string "name"
				o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
				o = msgp.AppendString(o, z.API.Name)
			}
			if (zb0002Mask & 0x2) == 0 { // if not omitted
				// string "bucket"
				o = append(o, 0xa6, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74)
				o = msgp.AppendString(o, z.API.Bucket)
			}
			if (zb0002Mask & 0x4) == 0 { // if not omitted
				// string "object"
				o = append(o, 0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
				o = msgp.AppendString(o, z.API.Object)
			}
			if (zb0002Mask & 0x8) == 0 { // if not omitted
				// string "objects"
				o = append(o, 0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
				o = msgp.AppendArrayHeader(o, uint32(len(z.API.Objects)))
				for za0001 := range z.API.Objects {
					// check for omitted fields
					zb0003Len := uint32(2)
					var zb0003Mask uint8 /* 2 bits */
					_ = zb0003Mask
					if z.API.Objects[za0001].VersionID == "" {
						zb0003Len--
						zb0003Mask |= 0x2
					}
					// variable map header, size zb0003Len
					o = append(o, 0x80|uint8(zb0003Len))

					// skip if no fields are to be emitted
					if zb0003Len != 0 {
						// string "objectName"
						o = append(o, 0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
						o = msgp.AppendString(o, z.API.Objects[za0001].ObjectName)
						if (zb0003Mask & 0x2) == 0 { // if not omitted
							// string "versionId"
							o = append(o, 0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
							o = msgp.AppendString(o, z.API.Objects[za0001].VersionID)
						}
					}
				}
			}
			if (zb0002Mask & 0x10) == 0 { // if not omitted
				// string "status"
				o = append(o, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
				o = msgp.AppendString(o, z.API.Status)
			}
			if (zb0002Mask & 0x20) == 0 { // if not omitted
				// string "statusCode"
				o = append(o, 0xaa, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
				o = msgp.AppendInt(o, z.API.StatusCode)
			}
			// string "rx"
			o = append(o, 0xa2, 0x72, 0x78)
			o = msgp.AppendInt64(o, z.API.InputBytes)
			// string "tx"
			o = append(o, 0xa2, 0x74, 0x78)
			o = msgp.AppendInt64(o, z.API.OutputBytes)
			if (zb0002Mask & 0x100) == 0 { // if not omitted
				// string "txHeaders"
				o = append(o, 0xa9, 0x74, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
				o = msgp.AppendInt64(o, z.API.HeaderBytes)
			}
			if (zb0002Mask & 0x200) == 0 { // if not omitted
				// string "timeToFirstByte"
				o = append(o, 0xaf, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65)
				o = msgp.AppendString(o, z.API.TimeToFirstByte)
			}
			if (zb0002Mask & 0x400) == 0 { // if not omitted
				// string "timeToFirstByteInNS"
				o = append(o, 0xb3, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x49, 0x6e, 0x4e, 0x53)
				o = msgp.AppendString(o, z.API.TimeToFirstByteInNS)
			}
			if (zb0002Mask & 0x800) == 0 { // if not omitted
				// string "timeToResponse"
				o = append(o, 0xae, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
				o = msgp.AppendString(o, z.API.TimeToResponse)
			}
			if (zb0002Mask & 0x1000) == 0 { // if not omitted
				// string "timeToResponseInNS"
				o = append(o, 0xb2, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x4e, 0x53)
				o = msgp.AppendString(o, z.API.TimeToResponseInNS)
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// string "remotehost"
			o = append(o, 0xaa, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x68, 0x6f, 0x73, 0x74)
			o = msgp.AppendString(o, z.RemoteHost)
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// string "requestID"
			o = append(o, 0xa9, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
			o = msgp.AppendString(o, z.RequestID)
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// string "userAgent"
			o = append(o, 0xa9, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
			o = msgp.AppendString(o, z.UserAgent)
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// string "requestPath"
			o = append(o, 0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68)
			o = msgp.AppendString(o, z.ReqPath)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// string "requestHost"
			o = append(o, 0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74)
			o = msgp.AppendString(o, z.ReqHost)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// string "requestNode"
			o = append(o, 0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65)
			o = msgp.AppendString(o, z.ReqNode)
		}
		if (zb0001Mask & 0x4000) == 0 { // if not omitted
			// string "requestClaims"
			o = append(o, 0xad, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
			o = msgp.AppendMapHeader(o, uint32(len(z.ReqClaims)))
			for za0002, za0003 := range z.ReqClaims {
				o = msgp.AppendString(o, za0002)
				o, err = msgp.AppendIntf(o, za0003)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0002)
					return
				}
			}
		}
		if (zb0001Mask & 0x8000) == 0 { // if not omitted
			// string "requestQuery"
			o = append(o, 0xac, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79)
			o = msgp.AppendMapHeader(o, uint32(len(z.ReqQuery)))
			for za0004, za0005 := range z.ReqQuery {
				o = msgp.AppendString(o, za0004)
				o = msgp.AppendString(o, za0005)
			}
		}
		if (zb0001Mask & 0x10000) == 0 { // if not omitted
			// string "requestHeader"
			o = append(o, 0xad, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
			o = msgp.AppendMapHeader(o, uint32(len(z.ReqHeader)))
			for za0006, za0007 := range z.ReqHeader {
				o = msgp.AppendString(o, za0006)
				o = msgp.AppendString(o, za0007)
			}
		}
		if (zb0001Mask & 0x20000) == 0 { // if not omitted
			// string "responseHeader"
			o = append(o, 0xae, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
			o = msgp.AppendMapHeader(o, uint32(len(z.RespHeader)))
			for za0008, za0009 := range z.RespHeader {
				o = msgp.AppendString(o, za0008)
				o = msgp.AppendString(o, za0009)
			}
		}
		if (zb0001Mask & 0x40000) == 0 { // if not omitted
			// string "tags"
			o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
			o = msgp.AppendMapHeader(o, uint32(len(z.Tags)))
			for za0010, za0011 := range z.Tags {
				o = msgp.AppendString(o, za0010)
				o, err = msgp.AppendIntf(o, za0011)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0010)
					return
				}
			}
		}
		if (zb0001Mask & 0x80000) == 0 { // if not omitted
			// string "accessKey"
			o = append(o, 0xa9, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
			o = msgp.AppendString(o, z.AccessKey)
		}
		if (zb0001Mask & 0x100000) == 0 { // if not omitted
			// string "parentUser"
			o = append(o, 0xaa, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72)
			o = msgp.AppendString(o, z.ParentUser)
		}
		if (zb0001Mask & 0x200000) == 0 { // if not omitted
			// string "error"
			o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
			o = msgp.AppendString(o, z.Error)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint32 /* 17 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "deploymentid":
			z.DeploymentID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
			zb0001Mask |= 0x1
		case "siteName":
			z.SiteName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SiteName")
				return
			}
			zb0001Mask |= 0x2
		case "time":
			z.Time, bts, err = msgp.ReadTimeUTCBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "event":
			z.Event, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Event")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
			zb0001Mask |= 0x4
		case "trigger":
			z.Trigger, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Trigger")
				return
			}
		case "api":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "API")
				return
			}
			var zb0002Mask uint16 /* 11 bits */
			_ = zb0002Mask
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "API")
					return
				}
				switch msgp.UnsafeString(field) {
				case "name":
					z.API.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "Name")
						return
					}
					zb0002Mask |= 0x1
				case "bucket":
					z.API.Bucket, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "Bucket")
						return
					}
					zb0002Mask |= 0x2
				case "object":
					z.API.Object, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "Object")
						return
					}
					zb0002Mask |= 0x4
				case "objects":
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "Objects")
						return
					}
					if cap(z.API.Objects) >= int(zb0003) {
						z.API.Objects = (z.API.Objects)[:zb0003]
					} else {
						z.API.Objects = make([]ObjectVersion, zb0003)
					}
					for za0001 := range z.API.Objects {
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "API", "Objects", za0001)
							return
						}
						var zb0004Mask uint8 /* 1 bits */
						_ = zb0004Mask
						for zb0004 > 0 {
							zb0004--
							field, bts, err = msgp.ReadMapKeyZC(bts)
							if err != nil {
								err = msgp.WrapError(err, "API", "Objects", za0001)
								return
							}
							switch msgp.UnsafeString(field) {
							case "objectName":
								z.API.Objects[za0001].ObjectName, bts, err = msgp.ReadStringBytes(bts)
								if err != nil {
									err = msgp.WrapError(err, "API", "Objects", za0001, "ObjectName")
									return
								}
							case "versionId":
								z.API.Objects[za0001].VersionID, bts, err = msgp.ReadStringBytes(bts)
								if err != nil {
									err = msgp.WrapError(err, "API", "Objects", za0001, "VersionID")
									return
								}
								zb0004Mask |= 0x1
							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									err = msgp.WrapError(err, "API", "Objects", za0001)
									return
								}
							}
						}
						// Clear omitted fields.
						if (zb0004Mask & 0x1) == 0 {
							z.API.Objects[za0001].VersionID = ""
						}

					}
					zb0002Mask |= 0x8
				case "status":
					z.API.Status, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "Status")
						return
					}
					zb0002Mask |= 0x10
				case "statusCode":
					z.API.StatusCode, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "StatusCode")
						return
					}
					zb0002Mask |= 0x20
				case "rx":
					z.API.InputBytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "InputBytes")
						return
					}
				case "tx":
					z.API.OutputBytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "OutputBytes")
						return
					}
				case "txHeaders":
					z.API.HeaderBytes, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "HeaderBytes")
						return
					}
					zb0002Mask |= 0x40
				case "timeToFirstByte":
					z.API.TimeToFirstByte, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToFirstByte")
						return
					}
					zb0002Mask |= 0x80
				case "timeToFirstByteInNS":
					z.API.TimeToFirstByteInNS, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToFirstByteInNS")
						return
					}
					zb0002Mask |= 0x100
				case "timeToResponse":
					z.API.TimeToResponse, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToResponse")
						return
					}
					zb0002Mask |= 0x200
				case "timeToResponseInNS":
					z.API.TimeToResponseInNS, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "API", "TimeToResponseInNS")
						return
					}
					zb0002Mask |= 0x400
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "API")
						return
					}
				}
			}
			// Clear omitted fields.
			if zb0002Mask != 0x7ff {
				if (zb0002Mask & 0x1) == 0 {
					z.API.Name = ""
				}
				if (zb0002Mask & 0x2) == 0 {
					z.API.Bucket = ""
				}
				if (zb0002Mask & 0x4) == 0 {
					z.API.Object = ""
				}
				if (zb0002Mask & 0x8) == 0 {
					z.API.Objects = nil
				}
				if (zb0002Mask & 0x10) == 0 {
					z.API.Status = ""
				}
				if (zb0002Mask & 0x20) == 0 {
					z.API.StatusCode = 0
				}
				if (zb0002Mask & 0x40) == 0 {
					z.API.HeaderBytes = 0
				}
				if (zb0002Mask & 0x80) == 0 {
					z.API.TimeToFirstByte = ""
				}
				if (zb0002Mask & 0x100) == 0 {
					z.API.TimeToFirstByteInNS = ""
				}
				if (zb0002Mask & 0x200) == 0 {
					z.API.TimeToResponse = ""
				}
				if (zb0002Mask & 0x400) == 0 {
					z.API.TimeToResponseInNS = ""
				}
			}
		case "remotehost":
			z.RemoteHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHost")
				return
			}
			zb0001Mask |= 0x8
		case "requestID":
			z.RequestID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
			zb0001Mask |= 0x10
		case "userAgent":
			z.UserAgent, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
			zb0001Mask |= 0x20
		case "requestPath":
			z.ReqPath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqPath")
				return
			}
			zb0001Mask |= 0x40
		case "requestHost":
			z.ReqHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
			zb0001Mask |= 0x80
		case "requestNode":
			z.ReqNode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqNode")
				return
			}
			zb0001Mask |= 0x100
		case "requestClaims":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			if z.ReqClaims == nil {
				z.ReqClaims = make(map[string]interface{}, zb0005)
			} else if len(z.ReqClaims) > 0 {
				clear(z.ReqClaims)
			}
			for zb0005 > 0 {
				var za0003 interface{}
				zb0005--
				var za0002 string
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				za0003, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0002)
					return
				}
				z.ReqClaims[za0002] = za0003
			}
			zb0001Mask |= 0x200
		case "requestQuery":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqQuery")
				return
			}
			if z.ReqQuery == nil {
				z.ReqQuery = make(map[string]string, zb0006)
			} else if len(z.ReqQuery) > 0 {
				clear(z.ReqQuery)
			}
			for zb0006 > 0 {
				var za0005 string
				zb0006--
				var za0004 string
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery")
					return
				}
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery", za0004)
					return
				}
				z.ReqQuery[za0004] = za0005
			}
			zb0001Mask |= 0x400
		case "requestHeader":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqHeader")
				return
			}
			if z.ReqHeader == nil {
				z.ReqHeader = make(map[string]string, zb0007)
			} else if len(z.ReqHeader) > 0 {
				clear(z.ReqHeader)
			}
			for zb0007 > 0 {
				var za0007 string
				zb0007--
				var za0006 string
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader")
					return
				}
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader", za0006)
					return
				}
				z.ReqHeader[za0006] = za0007
			}
			zb0001Mask |= 0x800
		case "responseHeader":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RespHeader")
				return
			}
			if z.RespHeader == nil {
				z.RespHeader = make(map[string]string, zb0008)
			} else if len(z.RespHeader) > 0 {
				clear(z.RespHeader)
			}
			for zb0008 > 0 {
				var za0009 string
				zb0008--
				var za0008 string
				za0008, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RespHeader")
					return
				}
				za0009, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RespHeader", za0008)
					return
				}
				z.RespHeader[za0008] = za0009
			}
			zb0001Mask |= 0x1000
		case "tags":
			var zb0009 uint32
			zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]interface{}, zb0009)
			} else if len(z.Tags) > 0 {
				clear(z.Tags)
			}
			for zb0009 > 0 {
				var za0011 interface{}
				zb0009--
				var za0010 string
				za0010, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0011, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0010)
					return
				}
				z.Tags[za0010] = za0011
			}
			zb0001Mask |= 0x2000
		case "accessKey":
			z.AccessKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
			zb0001Mask |= 0x4000
		case "parentUser":
			z.ParentUser, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
			zb0001Mask |= 0x8000
		case "error":
			z.Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
			zb0001Mask |= 0x10000
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1ffff {
		if (zb0001Mask & 0x1) == 0 {
			z.DeploymentID = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.SiteName = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Type = ""
		}
		if (zb0001Mask & 0x8) == 0 {
			z.RemoteHost = ""
		}
		if (zb0001Mask & 0x10) == 0 {
			z.RequestID = ""
		}
		if (zb0001Mask & 0x20) == 0 {
			z.UserAgent = ""
		}
		if (zb0001Mask & 0x40) == 0 {
			z.ReqPath = ""
		}
		if (zb0001Mask & 0x80) == 0 {
			z.ReqHost = ""
		}
		if (zb0001Mask & 0x100) == 0 {
			z.ReqNode = ""
		}
		if (zb0001Mask & 0x200) == 0 {
			z.ReqClaims = nil
		}
		if (zb0001Mask & 0x400) == 0 {
			z.ReqQuery = nil
		}
		if (zb0001Mask & 0x800) == 0 {
			z.ReqHeader = nil
		}
		if (zb0001Mask & 0x1000) == 0 {
			z.RespHeader = nil
		}
		if (zb0001Mask & 0x2000) == 0 {
			z.Tags = nil
		}
		if (zb0001Mask & 0x4000) == 0 {
			z.AccessKey = ""
		}
		if (zb0001Mask & 0x8000) == 0 {
			z.ParentUser = ""
		}
		if (zb0001Mask & 0x10000) == 0 {
			z.Error = ""
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Entry) Msgsize() (s int) {
	s = 3 + 8 + msgp.StringPrefixSize + len(z.Version) + 13 + msgp.StringPrefixSize + len(z.DeploymentID) + 9 + msgp.StringPrefixSize + len(z.SiteName) + 5 + msgp.TimeSize + 6 + msgp.StringPrefixSize + len(z.Event) + 5 + msgp.StringPrefixSize + len(z.Type) + 8 + msgp.StringPrefixSize + len(z.Trigger) + 4 + 1 + 5 + msgp.StringPrefixSize + len(z.API.Name) + 7 + msgp.StringPrefixSize + len(z.API.Bucket) + 7 + msgp.StringPrefixSize + len(z.API.Object) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.API.Objects {
		s += 1 + 11 + msgp.StringPrefixSize + len(z.API.Objects[za0001].ObjectName) + 10 + msgp.StringPrefixSize + len(z.API.Objects[za0001].VersionID)
	}
	s += 7 + msgp.StringPrefixSize + len(z.API.Status) + 11 + msgp.IntSize + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 10 + msgp.Int64Size + 16 + msgp.StringPrefixSize + len(z.API.TimeToFirstByte) + 20 + msgp.StringPrefixSize + len(z.API.TimeToFirstByteInNS) + 15 + msgp.StringPrefixSize + len(z.API.TimeToResponse) + 19 + msgp.StringPrefixSize + len(z.API.TimeToResponseInNS) + 11 + msgp.StringPrefixSize + len(z.RemoteHost) + 10 + msgp.StringPrefixSize + len(z.RequestID) + 10 + msgp.StringPrefixSize + len(z.UserAgent) + 12 + msgp.StringPrefixSize + len(z.ReqPath) + 12 + msgp.StringPrefixSize + len(z.ReqHost) + 12 + msgp.StringPrefixSize + len(z.ReqNode) + 14 + msgp.MapHeaderSize
	if z.ReqClaims != nil {
		for za0002, za0003 := range z.ReqClaims {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.GuessSize(za0003)
		}
	}
	s += 13 + msgp.MapHeaderSize
	if z.ReqQuery != nil {
		for za0004, za0005 := range z.ReqQuery {
			_ = za0005
			s += msgp.StringPrefixSize + len(za0004) + msgp.StringPrefixSize + len(za0005)
		}
	}
	s += 14 + msgp.MapHeaderSize
	if z.ReqHeader != nil {
		for za0006, za0007 := range z.ReqHeader {
			_ = za0007
			s += msgp.StringPrefixSize + len(za0006) + msgp.StringPrefixSize + len(za0007)
		}
	}
	s += 15 + msgp.MapHeaderSize
	if z.RespHeader != nil {
		for za0008, za0009 := range z.RespHeader {
			_ = za0009
			s += msgp.StringPrefixSize + len(za0008) + msgp.StringPrefixSize + len(za0009)
		}
	}
	s += 5 + msgp.MapHeaderSize
	if z.Tags != nil {
		for za0010, za0011 := range z.Tags {
			_ = za0011
			s += msgp.StringPrefixSize + len(za0010) + msgp.GuessSize(za0011)
		}
	}
	s += 10 + msgp.StringPrefixSize + len(z.AccessKey) + 11 + msgp.StringPrefixSize + len(z.ParentUser) + 6 + msgp.StringPrefixSize + len(z.Error)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectVersion) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "objectName":
			z.ObjectName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ObjectName")
				return
			}
		case "versionId":
			z.VersionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
			zb0001Mask |= 0x1
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.VersionID = ""
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ObjectVersion) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.VersionID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "objectName"
		err = en.Append(0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.ObjectName)
		if err != nil {
			err = msgp.WrapError(err, "ObjectName")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "versionId"
			err = en.Append(0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.VersionID)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ObjectVersion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.VersionID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "objectName"
		o = append(o, 0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.ObjectName)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "versionId"
			o = append(o, 0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
			o = msgp.AppendString(o, z.VersionID)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectVersion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "objectName":
			z.ObjectName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectName")
				return
			}
		case "versionId":
			z.VersionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
			zb0001Mask |= 0x1
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.VersionID = ""
	}

	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ObjectVersion) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.ObjectName) + 10 + msgp.StringPrefixSize + len(z.VersionID)
	return
}
