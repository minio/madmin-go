// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package log

import (
	"github.com/minio/madmin-go/v4"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *API) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
			zb0001Mask |= 0x1
		case "args":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				z.Args = nil
			} else {
				if z.Args == nil {
					z.Args = new(Args)
				}
				err = z.Args.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
			}
			zb0001Mask |= 0x2
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x3 {
		if (zb0001Mask & 0x1) == 0 {
			z.Name = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Args = nil
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *API) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.Name == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Args == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "name"
			err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Name)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "args"
			err = en.Append(0xa4, 0x61, 0x72, 0x67, 0x73)
			if err != nil {
				return
			}
			if z.Args == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Args.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *API) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.Name == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Args == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "name"
			o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
			o = msgp.AppendString(o, z.Name)
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "args"
			o = append(o, 0xa4, 0x61, 0x72, 0x67, 0x73)
			if z.Args == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Args.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *API) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
			zb0001Mask |= 0x1
		case "args":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Args = nil
			} else {
				if z.Args == nil {
					z.Args = new(Args)
				}
				bts, err = z.Args.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
			}
			zb0001Mask |= 0x2
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x3 {
		if (zb0001Mask & 0x1) == 0 {
			z.Name = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Args = nil
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *API) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5
	if z.Args == nil {
		s += msgp.NilSize
	} else {
		s += z.Args.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Args) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "bucket":
			z.Bucket, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
			zb0001Mask |= 0x1
		case "object":
			z.Object, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
			zb0001Mask |= 0x2
		case "versionId":
			z.VersionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
			zb0001Mask |= 0x4
		case "objects":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
			if cap(z.Objects) >= int(zb0002) {
				z.Objects = (z.Objects)[:zb0002]
			} else {
				z.Objects = make([]ObjectVersion, zb0002)
			}
			for za0001 := range z.Objects {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Objects", za0001)
					return
				}
				var zb0003Mask uint8 /* 1 bits */
				_ = zb0003Mask
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Objects", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "objectName":
						z.Objects[za0001].ObjectName, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001, "ObjectName")
							return
						}
					case "versionId":
						z.Objects[za0001].VersionID, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001, "VersionID")
							return
						}
						zb0003Mask |= 0x1
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001)
							return
						}
					}
				}
				// Clear omitted fields.
				if (zb0003Mask & 0x1) == 0 {
					z.Objects[za0001].VersionID = ""
				}

			}
			zb0001Mask |= 0x8
		case "metadata":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(map[string]string, zb0004)
			} else if len(z.Metadata) > 0 {
				clear(z.Metadata)
			}
			for zb0004 > 0 {
				zb0004--
				var za0002 string
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				var za0003 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0002)
					return
				}
				z.Metadata[za0002] = za0003
			}
			zb0001Mask |= 0x10
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1f {
		if (zb0001Mask & 0x1) == 0 {
			z.Bucket = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Object = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.VersionID = ""
		}
		if (zb0001Mask & 0x8) == 0 {
			z.Objects = nil
		}
		if (zb0001Mask & 0x10) == 0 {
			z.Metadata = nil
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Args) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Bucket == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Object == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.VersionID == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Objects == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Metadata == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "bucket"
			err = en.Append(0xa6, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.Bucket)
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "object"
			err = en.Append(0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.Object)
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "versionId"
			err = en.Append(0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.VersionID)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "objects"
			err = en.Append(0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Objects)))
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
			for za0001 := range z.Objects {
				// check for omitted fields
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.Objects[za0001].VersionID == "" {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				err = en.Append(0x80 | uint8(zb0002Len))
				if err != nil {
					return
				}

				// skip if no fields are to be emitted
				if zb0002Len != 0 {
					// write "objectName"
					err = en.Append(0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
					if err != nil {
						return
					}
					err = en.WriteString(z.Objects[za0001].ObjectName)
					if err != nil {
						err = msgp.WrapError(err, "Objects", za0001, "ObjectName")
						return
					}
					if (zb0002Mask & 0x2) == 0 { // if not omitted
						// write "versionId"
						err = en.Append(0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
						if err != nil {
							return
						}
						err = en.WriteString(z.Objects[za0001].VersionID)
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001, "VersionID")
							return
						}
					}
				}
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// write "metadata"
			err = en.Append(0xa8, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.Metadata)))
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			for za0002, za0003 := range z.Metadata {
				err = en.WriteString(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				err = en.WriteString(za0003)
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0002)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Args) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Bucket == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Object == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.VersionID == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Objects == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Metadata == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "bucket"
			o = append(o, 0xa6, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74)
			o = msgp.AppendString(o, z.Bucket)
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "object"
			o = append(o, 0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
			o = msgp.AppendString(o, z.Object)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "versionId"
			o = append(o, 0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
			o = msgp.AppendString(o, z.VersionID)
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "objects"
			o = append(o, 0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Objects)))
			for za0001 := range z.Objects {
				// check for omitted fields
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.Objects[za0001].VersionID == "" {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				o = append(o, 0x80|uint8(zb0002Len))

				// skip if no fields are to be emitted
				if zb0002Len != 0 {
					// string "objectName"
					o = append(o, 0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
					o = msgp.AppendString(o, z.Objects[za0001].ObjectName)
					if (zb0002Mask & 0x2) == 0 { // if not omitted
						// string "versionId"
						o = append(o, 0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
						o = msgp.AppendString(o, z.Objects[za0001].VersionID)
					}
				}
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "metadata"
			o = append(o, 0xa8, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
			o = msgp.AppendMapHeader(o, uint32(len(z.Metadata)))
			for za0002, za0003 := range z.Metadata {
				o = msgp.AppendString(o, za0002)
				o = msgp.AppendString(o, za0003)
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Args) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "bucket":
			z.Bucket, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
			zb0001Mask |= 0x1
		case "object":
			z.Object, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
			zb0001Mask |= 0x2
		case "versionId":
			z.VersionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
			zb0001Mask |= 0x4
		case "objects":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
			if cap(z.Objects) >= int(zb0002) {
				z.Objects = (z.Objects)[:zb0002]
			} else {
				z.Objects = make([]ObjectVersion, zb0002)
			}
			for za0001 := range z.Objects {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Objects", za0001)
					return
				}
				var zb0003Mask uint8 /* 1 bits */
				_ = zb0003Mask
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Objects", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "objectName":
						z.Objects[za0001].ObjectName, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001, "ObjectName")
							return
						}
					case "versionId":
						z.Objects[za0001].VersionID, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001, "VersionID")
							return
						}
						zb0003Mask |= 0x1
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Objects", za0001)
							return
						}
					}
				}
				// Clear omitted fields.
				if (zb0003Mask & 0x1) == 0 {
					z.Objects[za0001].VersionID = ""
				}

			}
			zb0001Mask |= 0x8
		case "metadata":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(map[string]string, zb0004)
			} else if len(z.Metadata) > 0 {
				clear(z.Metadata)
			}
			for zb0004 > 0 {
				var za0003 string
				zb0004--
				var za0002 string
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0002)
					return
				}
				z.Metadata[za0002] = za0003
			}
			zb0001Mask |= 0x10
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1f {
		if (zb0001Mask & 0x1) == 0 {
			z.Bucket = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Object = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.VersionID = ""
		}
		if (zb0001Mask & 0x8) == 0 {
			z.Objects = nil
		}
		if (zb0001Mask & 0x10) == 0 {
			z.Metadata = nil
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Args) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Bucket) + 7 + msgp.StringPrefixSize + len(z.Object) + 10 + msgp.StringPrefixSize + len(z.VersionID) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Objects {
		s += 1 + 11 + msgp.StringPrefixSize + len(z.Objects[za0001].ObjectName) + 10 + msgp.StringPrefixSize + len(z.Objects[za0001].VersionID)
	}
	s += 9 + msgp.MapHeaderSize
	if z.Metadata != nil {
		for za0002, za0003 := range z.Metadata {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.StringPrefixSize + len(za0003)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Entry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint16 /* 12 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "site":
			z.Site, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Site")
				return
			}
			zb0001Mask |= 0x1
		case "deploymentid":
			z.DeploymentID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
			zb0001Mask |= 0x2
		case "level":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Level")
					return
				}
				z.Level = madmin.LogKind(zb0002)
			}
		case "errKind":
			{
				var zb0003 string
				zb0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "LogKind")
					return
				}
				z.LogKind = madmin.LogKind(zb0003)
			}
			zb0001Mask |= 0x4
		case "time":
			z.Time, err = dc.ReadTimeUTC()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "api":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "API")
					return
				}
				z.API = nil
			} else {
				if z.API == nil {
					z.API = new(API)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "API")
					return
				}
				var zb0004Mask uint8 /* 2 bits */
				_ = zb0004Mask
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "API")
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.API.Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "API", "Name")
							return
						}
						zb0004Mask |= 0x1
					case "args":
						if dc.IsNil() {
							err = dc.ReadNil()
							if err != nil {
								err = msgp.WrapError(err, "API", "Args")
								return
							}
							z.API.Args = nil
						} else {
							if z.API.Args == nil {
								z.API.Args = new(Args)
							}
							err = z.API.Args.DecodeMsg(dc)
							if err != nil {
								err = msgp.WrapError(err, "API", "Args")
								return
							}
						}
						zb0004Mask |= 0x2
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "API")
							return
						}
					}
				}
				// Clear omitted fields.
				if zb0004Mask != 0x3 {
					if (zb0004Mask & 0x1) == 0 {
						z.API.Name = ""
					}
					if (zb0004Mask & 0x2) == 0 {
						z.API.Args = nil
					}
				}
			}
			zb0001Mask |= 0x8
		case "remotehost":
			z.RemoteHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RemoteHost")
				return
			}
			zb0001Mask |= 0x10
		case "host":
			z.Host, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
			zb0001Mask |= 0x20
		case "requestHost":
			z.RequestHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequestHost")
				return
			}
			zb0001Mask |= 0x40
		case "requestNode":
			z.RequestNode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequestNode")
				return
			}
			zb0001Mask |= 0x80
		case "requestID":
			z.RequestID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
			zb0001Mask |= 0x100
		case "userAgent":
			z.UserAgent, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
			zb0001Mask |= 0x200
		case "message":
			z.Message, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
			zb0001Mask |= 0x400
		case "error":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Trace")
					return
				}
				z.Trace = nil
			} else {
				if z.Trace == nil {
					z.Trace = new(Trace)
				}
				err = z.Trace.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Trace")
					return
				}
			}
			zb0001Mask |= 0x800
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0xfff {
		if (zb0001Mask & 0x1) == 0 {
			z.Site = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.DeploymentID = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.LogKind = ""
		}
		if (zb0001Mask & 0x8) == 0 {
			z.API = nil
		}
		if (zb0001Mask & 0x10) == 0 {
			z.RemoteHost = ""
		}
		if (zb0001Mask & 0x20) == 0 {
			z.Host = ""
		}
		if (zb0001Mask & 0x40) == 0 {
			z.RequestHost = ""
		}
		if (zb0001Mask & 0x80) == 0 {
			z.RequestNode = ""
		}
		if (zb0001Mask & 0x100) == 0 {
			z.RequestID = ""
		}
		if (zb0001Mask & 0x200) == 0 {
			z.UserAgent = ""
		}
		if (zb0001Mask & 0x400) == 0 {
			z.Message = ""
		}
		if (zb0001Mask & 0x800) == 0 {
			z.Trace = nil
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Entry) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(14)
	var zb0001Mask uint16 /* 14 bits */
	_ = zb0001Mask
	if z.Site == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.DeploymentID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.LogKind == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.API == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.RemoteHost == "" {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Host == "" {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.RequestHost == "" {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.RequestNode == "" {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.RequestID == "" {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.UserAgent == "" {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.Message == "" {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.Trace == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "site"
			err = en.Append(0xa4, 0x73, 0x69, 0x74, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Site)
			if err != nil {
				err = msgp.WrapError(err, "Site")
				return
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "deploymentid"
			err = en.Append(0xac, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.DeploymentID)
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
		}
		// write "level"
		err = en.Append(0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
		if err != nil {
			return
		}
		err = en.WriteString(string(z.Level))
		if err != nil {
			err = msgp.WrapError(err, "Level")
			return
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "errKind"
			err = en.Append(0xa7, 0x65, 0x72, 0x72, 0x4b, 0x69, 0x6e, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(string(z.LogKind))
			if err != nil {
				err = msgp.WrapError(err, "LogKind")
				return
			}
		}
		// write "time"
		err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteTime(z.Time)
		if err != nil {
			err = msgp.WrapError(err, "Time")
			return
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "api"
			err = en.Append(0xa3, 0x61, 0x70, 0x69)
			if err != nil {
				return
			}
			if z.API == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// check for omitted fields
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.API.Name == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.API.Args == nil {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				err = en.Append(0x80 | uint8(zb0002Len))
				if err != nil {
					return
				}

				// skip if no fields are to be emitted
				if zb0002Len != 0 {
					if (zb0002Mask & 0x1) == 0 { // if not omitted
						// write "name"
						err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
						if err != nil {
							return
						}
						err = en.WriteString(z.API.Name)
						if err != nil {
							err = msgp.WrapError(err, "API", "Name")
							return
						}
					}
					if (zb0002Mask & 0x2) == 0 { // if not omitted
						// write "args"
						err = en.Append(0xa4, 0x61, 0x72, 0x67, 0x73)
						if err != nil {
							return
						}
						if z.API.Args == nil {
							err = en.WriteNil()
							if err != nil {
								return
							}
						} else {
							err = z.API.Args.EncodeMsg(en)
							if err != nil {
								err = msgp.WrapError(err, "API", "Args")
								return
							}
						}
					}
				}
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// write "remotehost"
			err = en.Append(0xaa, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x68, 0x6f, 0x73, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.RemoteHost)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHost")
				return
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// write "host"
			err = en.Append(0xa4, 0x68, 0x6f, 0x73, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.Host)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// write "requestHost"
			err = en.Append(0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.RequestHost)
			if err != nil {
				err = msgp.WrapError(err, "RequestHost")
				return
			}
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// write "requestNode"
			err = en.Append(0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.RequestNode)
			if err != nil {
				err = msgp.WrapError(err, "RequestNode")
				return
			}
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// write "requestID"
			err = en.Append(0xa9, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
			if err != nil {
				return
			}
			err = en.WriteString(z.RequestID)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// write "userAgent"
			err = en.Append(0xa9, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.UserAgent)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// write "message"
			err = en.Append(0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Message)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// write "error"
			err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
			if err != nil {
				return
			}
			if z.Trace == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Trace.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Trace")
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Entry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(14)
	var zb0001Mask uint16 /* 14 bits */
	_ = zb0001Mask
	if z.Site == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.DeploymentID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.LogKind == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.API == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.RemoteHost == "" {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Host == "" {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.RequestHost == "" {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.RequestNode == "" {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.RequestID == "" {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.UserAgent == "" {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.Message == "" {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.Trace == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "site"
			o = append(o, 0xa4, 0x73, 0x69, 0x74, 0x65)
			o = msgp.AppendString(o, z.Site)
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "deploymentid"
			o = append(o, 0xac, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64)
			o = msgp.AppendString(o, z.DeploymentID)
		}
		// string "level"
		o = append(o, 0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
		o = msgp.AppendString(o, string(z.Level))
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "errKind"
			o = append(o, 0xa7, 0x65, 0x72, 0x72, 0x4b, 0x69, 0x6e, 0x64)
			o = msgp.AppendString(o, string(z.LogKind))
		}
		// string "time"
		o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
		o = msgp.AppendTime(o, z.Time)
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "api"
			o = append(o, 0xa3, 0x61, 0x70, 0x69)
			if z.API == nil {
				o = msgp.AppendNil(o)
			} else {
				// check for omitted fields
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.API.Name == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.API.Args == nil {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				o = append(o, 0x80|uint8(zb0002Len))

				// skip if no fields are to be emitted
				if zb0002Len != 0 {
					if (zb0002Mask & 0x1) == 0 { // if not omitted
						// string "name"
						o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
						o = msgp.AppendString(o, z.API.Name)
					}
					if (zb0002Mask & 0x2) == 0 { // if not omitted
						// string "args"
						o = append(o, 0xa4, 0x61, 0x72, 0x67, 0x73)
						if z.API.Args == nil {
							o = msgp.AppendNil(o)
						} else {
							o, err = z.API.Args.MarshalMsg(o)
							if err != nil {
								err = msgp.WrapError(err, "API", "Args")
								return
							}
						}
					}
				}
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// string "remotehost"
			o = append(o, 0xaa, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x68, 0x6f, 0x73, 0x74)
			o = msgp.AppendString(o, z.RemoteHost)
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// string "host"
			o = append(o, 0xa4, 0x68, 0x6f, 0x73, 0x74)
			o = msgp.AppendString(o, z.Host)
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// string "requestHost"
			o = append(o, 0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74)
			o = msgp.AppendString(o, z.RequestHost)
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// string "requestNode"
			o = append(o, 0xab, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65)
			o = msgp.AppendString(o, z.RequestNode)
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// string "requestID"
			o = append(o, 0xa9, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
			o = msgp.AppendString(o, z.RequestID)
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// string "userAgent"
			o = append(o, 0xa9, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
			o = msgp.AppendString(o, z.UserAgent)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// string "message"
			o = append(o, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
			o = msgp.AppendString(o, z.Message)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// string "error"
			o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
			if z.Trace == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Trace.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Trace")
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint16 /* 12 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "site":
			z.Site, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Site")
				return
			}
			zb0001Mask |= 0x1
		case "deploymentid":
			z.DeploymentID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
			zb0001Mask |= 0x2
		case "level":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Level")
					return
				}
				z.Level = madmin.LogKind(zb0002)
			}
		case "errKind":
			{
				var zb0003 string
				zb0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LogKind")
					return
				}
				z.LogKind = madmin.LogKind(zb0003)
			}
			zb0001Mask |= 0x4
		case "time":
			z.Time, bts, err = msgp.ReadTimeUTCBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "api":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.API = nil
			} else {
				if z.API == nil {
					z.API = new(API)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "API")
					return
				}
				var zb0004Mask uint8 /* 2 bits */
				_ = zb0004Mask
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "API")
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.API.Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "API", "Name")
							return
						}
						zb0004Mask |= 0x1
					case "args":
						if msgp.IsNil(bts) {
							bts, err = msgp.ReadNilBytes(bts)
							if err != nil {
								return
							}
							z.API.Args = nil
						} else {
							if z.API.Args == nil {
								z.API.Args = new(Args)
							}
							bts, err = z.API.Args.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "API", "Args")
								return
							}
						}
						zb0004Mask |= 0x2
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "API")
							return
						}
					}
				}
				// Clear omitted fields.
				if zb0004Mask != 0x3 {
					if (zb0004Mask & 0x1) == 0 {
						z.API.Name = ""
					}
					if (zb0004Mask & 0x2) == 0 {
						z.API.Args = nil
					}
				}
			}
			zb0001Mask |= 0x8
		case "remotehost":
			z.RemoteHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHost")
				return
			}
			zb0001Mask |= 0x10
		case "host":
			z.Host, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
			zb0001Mask |= 0x20
		case "requestHost":
			z.RequestHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestHost")
				return
			}
			zb0001Mask |= 0x40
		case "requestNode":
			z.RequestNode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestNode")
				return
			}
			zb0001Mask |= 0x80
		case "requestID":
			z.RequestID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
			zb0001Mask |= 0x100
		case "userAgent":
			z.UserAgent, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
			zb0001Mask |= 0x200
		case "message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
			zb0001Mask |= 0x400
		case "error":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Trace = nil
			} else {
				if z.Trace == nil {
					z.Trace = new(Trace)
				}
				bts, err = z.Trace.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Trace")
					return
				}
			}
			zb0001Mask |= 0x800
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0xfff {
		if (zb0001Mask & 0x1) == 0 {
			z.Site = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.DeploymentID = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.LogKind = ""
		}
		if (zb0001Mask & 0x8) == 0 {
			z.API = nil
		}
		if (zb0001Mask & 0x10) == 0 {
			z.RemoteHost = ""
		}
		if (zb0001Mask & 0x20) == 0 {
			z.Host = ""
		}
		if (zb0001Mask & 0x40) == 0 {
			z.RequestHost = ""
		}
		if (zb0001Mask & 0x80) == 0 {
			z.RequestNode = ""
		}
		if (zb0001Mask & 0x100) == 0 {
			z.RequestID = ""
		}
		if (zb0001Mask & 0x200) == 0 {
			z.UserAgent = ""
		}
		if (zb0001Mask & 0x400) == 0 {
			z.Message = ""
		}
		if (zb0001Mask & 0x800) == 0 {
			z.Trace = nil
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Entry) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Site) + 13 + msgp.StringPrefixSize + len(z.DeploymentID) + 6 + msgp.StringPrefixSize + len(string(z.Level)) + 8 + msgp.StringPrefixSize + len(string(z.LogKind)) + 5 + msgp.TimeSize + 4
	if z.API == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.API.Name) + 5
		if z.API.Args == nil {
			s += msgp.NilSize
		} else {
			s += z.API.Args.Msgsize()
		}
	}
	s += 11 + msgp.StringPrefixSize + len(z.RemoteHost) + 5 + msgp.StringPrefixSize + len(z.Host) + 12 + msgp.StringPrefixSize + len(z.RequestHost) + 12 + msgp.StringPrefixSize + len(z.RequestNode) + 10 + msgp.StringPrefixSize + len(z.RequestID) + 10 + msgp.StringPrefixSize + len(z.UserAgent) + 8 + msgp.StringPrefixSize + len(z.Message) + 6
	if z.Trace == nil {
		s += msgp.NilSize
	} else {
		s += z.Trace.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Info) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Entry":
			err = z.Entry.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Entry")
				return
			}
		case "node":
			z.NodeName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NodeName")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Info) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Entry"
	err = en.Append(0x82, 0xa5, 0x45, 0x6e, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	err = z.Entry.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Entry")
		return
	}
	// write "node"
	err = en.Append(0xa4, 0x6e, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.NodeName)
	if err != nil {
		err = msgp.WrapError(err, "NodeName")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Info) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Entry"
	o = append(o, 0x82, 0xa5, 0x45, 0x6e, 0x74, 0x72, 0x79)
	o, err = z.Entry.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Entry")
		return
	}
	// string "node"
	o = append(o, 0xa4, 0x6e, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.NodeName)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Info) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Entry":
			bts, err = z.Entry.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Entry")
				return
			}
		case "node":
			z.NodeName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeName")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Info) Msgsize() (s int) {
	s = 1 + 6 + z.Entry.Msgsize() + 5 + msgp.StringPrefixSize + len(z.NodeName)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectVersion) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "objectName":
			z.ObjectName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ObjectName")
				return
			}
		case "versionId":
			z.VersionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
			zb0001Mask |= 0x1
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.VersionID = ""
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ObjectVersion) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.VersionID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "objectName"
		err = en.Append(0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.ObjectName)
		if err != nil {
			err = msgp.WrapError(err, "ObjectName")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "versionId"
			err = en.Append(0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.VersionID)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ObjectVersion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.VersionID == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "objectName"
		o = append(o, 0xaa, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.ObjectName)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "versionId"
			o = append(o, 0xa9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64)
			o = msgp.AppendString(o, z.VersionID)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectVersion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "objectName":
			z.ObjectName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectName")
				return
			}
		case "versionId":
			z.VersionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
			zb0001Mask |= 0x1
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if (zb0001Mask & 0x1) == 0 {
		z.VersionID = ""
	}

	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ObjectVersion) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.ObjectName) + 10 + msgp.StringPrefixSize + len(z.VersionID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Trace) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "message":
			z.Message, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
			zb0001Mask |= 0x1
		case "source":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
			if cap(z.Source) >= int(zb0002) {
				z.Source = (z.Source)[:zb0002]
			} else {
				z.Source = make([]string, zb0002)
			}
			for za0001 := range z.Source {
				z.Source[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Source", za0001)
					return
				}
			}
			zb0001Mask |= 0x2
		case "variables":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Variables")
				return
			}
			if z.Variables == nil {
				z.Variables = make(map[string]interface{}, zb0003)
			} else if len(z.Variables) > 0 {
				clear(z.Variables)
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Variables")
					return
				}
				var za0003 interface{}
				za0003, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Variables", za0002)
					return
				}
				z.Variables[za0002] = za0003
			}
			zb0001Mask |= 0x4
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x7 {
		if (zb0001Mask & 0x1) == 0 {
			z.Message = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Source = nil
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Variables = nil
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Trace) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Message == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Source == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Variables == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "message"
			err = en.Append(0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Message)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "source"
			err = en.Append(0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Source)))
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
			for za0001 := range z.Source {
				err = en.WriteString(z.Source[za0001])
				if err != nil {
					err = msgp.WrapError(err, "Source", za0001)
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "variables"
			err = en.Append(0xa9, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.Variables)))
			if err != nil {
				err = msgp.WrapError(err, "Variables")
				return
			}
			for za0002, za0003 := range z.Variables {
				err = en.WriteString(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Variables")
					return
				}
				err = en.WriteIntf(za0003)
				if err != nil {
					err = msgp.WrapError(err, "Variables", za0002)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Trace) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Message == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Source == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Variables == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "message"
			o = append(o, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
			o = msgp.AppendString(o, z.Message)
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "source"
			o = append(o, 0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Source)))
			for za0001 := range z.Source {
				o = msgp.AppendString(o, z.Source[za0001])
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "variables"
			o = append(o, 0xa9, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73)
			o = msgp.AppendMapHeader(o, uint32(len(z.Variables)))
			for za0002, za0003 := range z.Variables {
				o = msgp.AppendString(o, za0002)
				o, err = msgp.AppendIntf(o, za0003)
				if err != nil {
					err = msgp.WrapError(err, "Variables", za0002)
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Trace) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
			zb0001Mask |= 0x1
		case "source":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
			if cap(z.Source) >= int(zb0002) {
				z.Source = (z.Source)[:zb0002]
			} else {
				z.Source = make([]string, zb0002)
			}
			for za0001 := range z.Source {
				z.Source[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Source", za0001)
					return
				}
			}
			zb0001Mask |= 0x2
		case "variables":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Variables")
				return
			}
			if z.Variables == nil {
				z.Variables = make(map[string]interface{}, zb0003)
			} else if len(z.Variables) > 0 {
				clear(z.Variables)
			}
			for zb0003 > 0 {
				var za0003 interface{}
				zb0003--
				var za0002 string
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Variables")
					return
				}
				za0003, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Variables", za0002)
					return
				}
				z.Variables[za0002] = za0003
			}
			zb0001Mask |= 0x4
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x7 {
		if (zb0001Mask & 0x1) == 0 {
			z.Message = ""
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Source = nil
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Variables = nil
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Trace) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Message) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Source {
		s += msgp.StringPrefixSize + len(z.Source[za0001])
	}
	s += 10 + msgp.MapHeaderSize
	if z.Variables != nil {
		for za0002, za0003 := range z.Variables {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.GuessSize(za0003)
		}
	}
	return
}
