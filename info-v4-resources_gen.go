package madmin

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ClusterResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mode":
			z.Mode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "domains":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Domains")
				return
			}
			if cap(z.Domains) >= int(zb0002) {
				z.Domains = (z.Domains)[:zb0002]
			} else {
				z.Domains = make([]string, zb0002)
			}
			for za0001 := range z.Domains {
				z.Domains[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Domains", za0001)
					return
				}
			}
			zb0001Mask |= 0x1
		case "region":
			z.Region, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Region")
				return
			}
			zb0001Mask |= 0x2
		case "deploymentId":
			z.DeploymentID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
		case "poolCount":
			z.PoolCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PoolCount")
				return
			}
		case "poolsLayout":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PoolsLayout")
				return
			}
			if cap(z.PoolsLayout) >= int(zb0003) {
				z.PoolsLayout = (z.PoolsLayout)[:zb0003]
			} else {
				z.PoolsLayout = make([]PoolLayout, zb0003)
			}
			for za0002 := range z.PoolsLayout {
				err = z.PoolsLayout[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "PoolsLayout", za0002)
					return
				}
			}
			zb0001Mask |= 0x4
		case "nodeCount":
			z.NodeCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeCount")
				return
			}
		case "driveCount":
			z.DriveCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DriveCount")
				return
			}
		case "setCount":
			z.SetCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SetCount")
				return
			}
		case "bucketCount":
			z.BucketCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BucketCount")
				return
			}
		case "objectCount":
			z.ObjectCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "versionCount":
			z.VersionCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "VersionCount")
				return
			}
		case "deleteMarkerCount":
			z.DeleteMarkerCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkerCount")
				return
			}
		case "totalSize":
			z.TotalSize, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TotalSize")
				return
			}
		case "onlineDrives":
			z.OnlineDrives, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OnlineDrives")
				return
			}
		case "offlineDrives":
			z.OfflineDrives, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OfflineDrives")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x7 {
		if (zb0001Mask & 0x1) == 0 {
			z.Domains = nil
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Region = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.PoolsLayout = nil
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ClusterResource) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(16)
	var zb0001Mask uint16 /* 16 bits */
	_ = zb0001Mask
	if z.Domains == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Region == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.PoolsLayout == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "mode"
		err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Mode)
		if err != nil {
			err = msgp.WrapError(err, "Mode")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "domains"
			err = en.Append(0xa7, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Domains)))
			if err != nil {
				err = msgp.WrapError(err, "Domains")
				return
			}
			for za0001 := range z.Domains {
				err = en.WriteString(z.Domains[za0001])
				if err != nil {
					err = msgp.WrapError(err, "Domains", za0001)
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "region"
			err = en.Append(0xa6, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteString(z.Region)
			if err != nil {
				err = msgp.WrapError(err, "Region")
				return
			}
		}
		// write "deploymentId"
		err = en.Append(0xac, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.DeploymentID)
		if err != nil {
			err = msgp.WrapError(err, "DeploymentID")
			return
		}
		// write "poolCount"
		err = en.Append(0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.PoolCount)
		if err != nil {
			err = msgp.WrapError(err, "PoolCount")
			return
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "poolsLayout"
			err = en.Append(0xab, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.PoolsLayout)))
			if err != nil {
				err = msgp.WrapError(err, "PoolsLayout")
				return
			}
			for za0002 := range z.PoolsLayout {
				err = z.PoolsLayout[za0002].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "PoolsLayout", za0002)
					return
				}
			}
		}
		// write "nodeCount"
		err = en.Append(0xa9, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.NodeCount)
		if err != nil {
			err = msgp.WrapError(err, "NodeCount")
			return
		}
		// write "driveCount"
		err = en.Append(0xaa, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.DriveCount)
		if err != nil {
			err = msgp.WrapError(err, "DriveCount")
			return
		}
		// write "setCount"
		err = en.Append(0xa8, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.SetCount)
		if err != nil {
			err = msgp.WrapError(err, "SetCount")
			return
		}
		// write "bucketCount"
		err = en.Append(0xab, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.BucketCount)
		if err != nil {
			err = msgp.WrapError(err, "BucketCount")
			return
		}
		// write "objectCount"
		err = en.Append(0xab, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ObjectCount)
		if err != nil {
			err = msgp.WrapError(err, "ObjectCount")
			return
		}
		// write "versionCount"
		err = en.Append(0xac, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.VersionCount)
		if err != nil {
			err = msgp.WrapError(err, "VersionCount")
			return
		}
		// write "deleteMarkerCount"
		err = en.Append(0xb1, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.DeleteMarkerCount)
		if err != nil {
			err = msgp.WrapError(err, "DeleteMarkerCount")
			return
		}
		// write "totalSize"
		err = en.Append(0xa9, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.TotalSize)
		if err != nil {
			err = msgp.WrapError(err, "TotalSize")
			return
		}
		// write "onlineDrives"
		err = en.Append(0xac, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
		if err != nil {
			return
		}
		err = en.WriteInt(z.OnlineDrives)
		if err != nil {
			err = msgp.WrapError(err, "OnlineDrives")
			return
		}
		// write "offlineDrives"
		err = en.Append(0xad, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
		if err != nil {
			return
		}
		err = en.WriteInt(z.OfflineDrives)
		if err != nil {
			err = msgp.WrapError(err, "OfflineDrives")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ClusterResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(16)
	var zb0001Mask uint16 /* 16 bits */
	_ = zb0001Mask
	if z.Domains == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Region == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.PoolsLayout == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "mode"
		o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
		o = msgp.AppendString(o, z.Mode)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "domains"
			o = append(o, 0xa7, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Domains)))
			for za0001 := range z.Domains {
				o = msgp.AppendString(o, z.Domains[za0001])
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "region"
			o = append(o, 0xa6, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.Region)
		}
		// string "deploymentId"
		o = append(o, 0xac, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64)
		o = msgp.AppendString(o, z.DeploymentID)
		// string "poolCount"
		o = append(o, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.PoolCount)
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "poolsLayout"
			o = append(o, 0xab, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74)
			o = msgp.AppendArrayHeader(o, uint32(len(z.PoolsLayout)))
			for za0002 := range z.PoolsLayout {
				o, err = z.PoolsLayout[za0002].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "PoolsLayout", za0002)
					return
				}
			}
		}
		// string "nodeCount"
		o = append(o, 0xa9, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.NodeCount)
		// string "driveCount"
		o = append(o, 0xaa, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.DriveCount)
		// string "setCount"
		o = append(o, 0xa8, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.SetCount)
		// string "bucketCount"
		o = append(o, 0xab, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.BucketCount)
		// string "objectCount"
		o = append(o, 0xab, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.ObjectCount)
		// string "versionCount"
		o = append(o, 0xac, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.VersionCount)
		// string "deleteMarkerCount"
		o = append(o, 0xb1, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.DeleteMarkerCount)
		// string "totalSize"
		o = append(o, 0xa9, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65)
		o = msgp.AppendUint64(o, z.TotalSize)
		// string "onlineDrives"
		o = append(o, 0xac, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
		o = msgp.AppendInt(o, z.OnlineDrives)
		// string "offlineDrives"
		o = append(o, 0xad, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
		o = msgp.AppendInt(o, z.OfflineDrives)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClusterResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mode":
			z.Mode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "domains":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Domains")
				return
			}
			if cap(z.Domains) >= int(zb0002) {
				z.Domains = (z.Domains)[:zb0002]
			} else {
				z.Domains = make([]string, zb0002)
			}
			for za0001 := range z.Domains {
				z.Domains[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Domains", za0001)
					return
				}
			}
			zb0001Mask |= 0x1
		case "region":
			z.Region, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Region")
				return
			}
			zb0001Mask |= 0x2
		case "deploymentId":
			z.DeploymentID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeploymentID")
				return
			}
		case "poolCount":
			z.PoolCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolCount")
				return
			}
		case "poolsLayout":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolsLayout")
				return
			}
			if cap(z.PoolsLayout) >= int(zb0003) {
				z.PoolsLayout = (z.PoolsLayout)[:zb0003]
			} else {
				z.PoolsLayout = make([]PoolLayout, zb0003)
			}
			for za0002 := range z.PoolsLayout {
				bts, err = z.PoolsLayout[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PoolsLayout", za0002)
					return
				}
			}
			zb0001Mask |= 0x4
		case "nodeCount":
			z.NodeCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeCount")
				return
			}
		case "driveCount":
			z.DriveCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DriveCount")
				return
			}
		case "setCount":
			z.SetCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SetCount")
				return
			}
		case "bucketCount":
			z.BucketCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BucketCount")
				return
			}
		case "objectCount":
			z.ObjectCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "versionCount":
			z.VersionCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionCount")
				return
			}
		case "deleteMarkerCount":
			z.DeleteMarkerCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkerCount")
				return
			}
		case "totalSize":
			z.TotalSize, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalSize")
				return
			}
		case "onlineDrives":
			z.OnlineDrives, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OnlineDrives")
				return
			}
		case "offlineDrives":
			z.OfflineDrives, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OfflineDrives")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x7 {
		if (zb0001Mask & 0x1) == 0 {
			z.Domains = nil
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Region = ""
		}
		if (zb0001Mask & 0x4) == 0 {
			z.PoolsLayout = nil
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ClusterResource) Msgsize() (s int) {
	s = 3 + 5 + msgp.StringPrefixSize + len(z.Mode) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Domains {
		s += msgp.StringPrefixSize + len(z.Domains[za0001])
	}
	s += 7 + msgp.StringPrefixSize + len(z.Region) + 13 + msgp.StringPrefixSize + len(z.DeploymentID) + 10 + msgp.IntSize + 12 + msgp.ArrayHeaderSize
	for za0002 := range z.PoolsLayout {
		s += z.PoolsLayout[za0002].Msgsize()
	}
	s += 10 + msgp.IntSize + 11 + msgp.IntSize + 9 + msgp.IntSize + 12 + msgp.IntSize + 12 + msgp.IntSize + 13 + msgp.IntSize + 18 + msgp.IntSize + 10 + msgp.Uint64Size + 13 + msgp.IntSize + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DriveCounts) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ok":
			z.Ok, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
			zb0001Mask |= 0x1
		case "offline":
			z.Offline, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
			zb0001Mask |= 0x2
		case "corrupt":
			z.Corrupt, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Corrupt")
				return
			}
			zb0001Mask |= 0x4
		case "missing":
			z.Missing, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Missing")
				return
			}
			zb0001Mask |= 0x8
		case "permission":
			z.Permission, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
			zb0001Mask |= 0x10
		case "faulty":
			z.Faulty, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Faulty")
				return
			}
			zb0001Mask |= 0x20
		case "rootMount":
			z.RootMount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RootMount")
				return
			}
			zb0001Mask |= 0x40
		case "unknown":
			z.Unknown, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Unknown")
				return
			}
			zb0001Mask |= 0x80
		case "unformatted":
			z.Unformatted, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Unformatted")
				return
			}
			zb0001Mask |= 0x100
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1ff {
		if (zb0001Mask & 0x1) == 0 {
			z.Ok = 0
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Offline = 0
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Corrupt = 0
		}
		if (zb0001Mask & 0x8) == 0 {
			z.Missing = 0
		}
		if (zb0001Mask & 0x10) == 0 {
			z.Permission = 0
		}
		if (zb0001Mask & 0x20) == 0 {
			z.Faulty = 0
		}
		if (zb0001Mask & 0x40) == 0 {
			z.RootMount = 0
		}
		if (zb0001Mask & 0x80) == 0 {
			z.Unknown = 0
		}
		if (zb0001Mask & 0x100) == 0 {
			z.Unformatted = 0
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DriveCounts) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	if z.Ok == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Offline == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Corrupt == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Missing == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Permission == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Faulty == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.RootMount == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Unknown == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Unformatted == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// write "ok"
			err = en.Append(0xa2, 0x6f, 0x6b)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Ok)
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "offline"
			err = en.Append(0xa7, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Offline)
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "corrupt"
			err = en.Append(0xa7, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Corrupt)
			if err != nil {
				err = msgp.WrapError(err, "Corrupt")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "missing"
			err = en.Append(0xa7, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Missing)
			if err != nil {
				err = msgp.WrapError(err, "Missing")
				return
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// write "permission"
			err = en.Append(0xaa, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Permission)
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "faulty"
			err = en.Append(0xa6, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Faulty)
			if err != nil {
				err = msgp.WrapError(err, "Faulty")
				return
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// write "rootMount"
			err = en.Append(0xa9, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt(z.RootMount)
			if err != nil {
				err = msgp.WrapError(err, "RootMount")
				return
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// write "unknown"
			err = en.Append(0xa7, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Unknown)
			if err != nil {
				err = msgp.WrapError(err, "Unknown")
				return
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// write "unformatted"
			err = en.Append(0xab, 0x75, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Unformatted)
			if err != nil {
				err = msgp.WrapError(err, "Unformatted")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DriveCounts) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	if z.Ok == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Offline == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Corrupt == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Missing == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Permission == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Faulty == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.RootMount == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.Unknown == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Unformatted == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		if (zb0001Mask & 0x1) == 0 { // if not omitted
			// string "ok"
			o = append(o, 0xa2, 0x6f, 0x6b)
			o = msgp.AppendInt(o, z.Ok)
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "offline"
			o = append(o, 0xa7, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
			o = msgp.AppendInt(o, z.Offline)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "corrupt"
			o = append(o, 0xa7, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74)
			o = msgp.AppendInt(o, z.Corrupt)
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "missing"
			o = append(o, 0xa7, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67)
			o = msgp.AppendInt(o, z.Missing)
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "permission"
			o = append(o, 0xaa, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendInt(o, z.Permission)
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "faulty"
			o = append(o, 0xa6, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79)
			o = msgp.AppendInt(o, z.Faulty)
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// string "rootMount"
			o = append(o, 0xa9, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendInt(o, z.RootMount)
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// string "unknown"
			o = append(o, 0xa7, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e)
			o = msgp.AppendInt(o, z.Unknown)
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// string "unformatted"
			o = append(o, 0xab, 0x75, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64)
			o = msgp.AppendInt(o, z.Unformatted)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DriveCounts) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ok":
			z.Ok, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
			zb0001Mask |= 0x1
		case "offline":
			z.Offline, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
			zb0001Mask |= 0x2
		case "corrupt":
			z.Corrupt, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Corrupt")
				return
			}
			zb0001Mask |= 0x4
		case "missing":
			z.Missing, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Missing")
				return
			}
			zb0001Mask |= 0x8
		case "permission":
			z.Permission, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
			zb0001Mask |= 0x10
		case "faulty":
			z.Faulty, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Faulty")
				return
			}
			zb0001Mask |= 0x20
		case "rootMount":
			z.RootMount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RootMount")
				return
			}
			zb0001Mask |= 0x40
		case "unknown":
			z.Unknown, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Unknown")
				return
			}
			zb0001Mask |= 0x80
		case "unformatted":
			z.Unformatted, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Unformatted")
				return
			}
			zb0001Mask |= 0x100
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1ff {
		if (zb0001Mask & 0x1) == 0 {
			z.Ok = 0
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Offline = 0
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Corrupt = 0
		}
		if (zb0001Mask & 0x8) == 0 {
			z.Missing = 0
		}
		if (zb0001Mask & 0x10) == 0 {
			z.Permission = 0
		}
		if (zb0001Mask & 0x20) == 0 {
			z.Faulty = 0
		}
		if (zb0001Mask & 0x40) == 0 {
			z.RootMount = 0
		}
		if (zb0001Mask & 0x80) == 0 {
			z.Unknown = 0
		}
		if (zb0001Mask & 0x100) == 0 {
			z.Unformatted = 0
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DriveCounts) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 8 + msgp.IntSize + 8 + msgp.IntSize + 8 + msgp.IntSize + 11 + msgp.IntSize + 7 + msgp.IntSize + 10 + msgp.IntSize + 8 + msgp.IntSize + 12 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DriveResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "idx":
			z.DriveIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DriveIndex")
				return
			}
		case "serverIndex":
			z.ServerIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ServerIndex")
				return
			}
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "nodeId":
			z.NodeID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "poolIndex":
			z.PoolIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "setIndex":
			z.SetIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SetIndex")
				return
			}
		case "state":
			z.State, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "healing":
			z.Healing, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Healing")
				return
			}
		case "size":
			z.Size, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "used":
			z.Used, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Used")
				return
			}
		case "available":
			z.Available, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Available")
				return
			}
		case "uuid":
			z.UUID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DriveResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "id"
	err = en.Append(0x8d, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "idx"
	err = en.Append(0xa3, 0x69, 0x64, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DriveIndex)
	if err != nil {
		err = msgp.WrapError(err, "DriveIndex")
		return
	}
	// write "serverIndex"
	err = en.Append(0xab, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ServerIndex)
	if err != nil {
		err = msgp.WrapError(err, "ServerIndex")
		return
	}
	// write "path"
	err = en.Append(0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "nodeId"
	err = en.Append(0xa6, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "poolIndex"
	err = en.Append(0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PoolIndex)
	if err != nil {
		err = msgp.WrapError(err, "PoolIndex")
		return
	}
	// write "setIndex"
	err = en.Append(0xa8, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SetIndex)
	if err != nil {
		err = msgp.WrapError(err, "SetIndex")
		return
	}
	// write "state"
	err = en.Append(0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.State)
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// write "healing"
	err = en.Append(0xa7, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Healing)
	if err != nil {
		err = msgp.WrapError(err, "Healing")
		return
	}
	// write "size"
	err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "used"
	err = en.Append(0xa4, 0x75, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Used)
	if err != nil {
		err = msgp.WrapError(err, "Used")
		return
	}
	// write "available"
	err = en.Append(0xa9, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Available)
	if err != nil {
		err = msgp.WrapError(err, "Available")
		return
	}
	// write "uuid"
	err = en.Append(0xa4, 0x75, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.UUID)
	if err != nil {
		err = msgp.WrapError(err, "UUID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DriveResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "id"
	o = append(o, 0x8d, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	// string "idx"
	o = append(o, 0xa3, 0x69, 0x64, 0x78)
	o = msgp.AppendInt(o, z.DriveIndex)
	// string "serverIndex"
	o = append(o, 0xab, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.ServerIndex)
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "nodeId"
	o = append(o, 0xa6, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.NodeID)
	// string "poolIndex"
	o = append(o, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.PoolIndex)
	// string "setIndex"
	o = append(o, 0xa8, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.SetIndex)
	// string "state"
	o = append(o, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o = msgp.AppendString(o, z.State)
	// string "healing"
	o = append(o, 0xa7, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	o = msgp.AppendBool(o, z.Healing)
	// string "size"
	o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendUint64(o, z.Size)
	// string "used"
	o = append(o, 0xa4, 0x75, 0x73, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.Used)
	// string "available"
	o = append(o, 0xa9, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendUint64(o, z.Available)
	// string "uuid"
	o = append(o, 0xa4, 0x75, 0x75, 0x69, 0x64)
	o = msgp.AppendString(o, z.UUID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DriveResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "idx":
			z.DriveIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DriveIndex")
				return
			}
		case "serverIndex":
			z.ServerIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerIndex")
				return
			}
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "nodeId":
			z.NodeID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "poolIndex":
			z.PoolIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "setIndex":
			z.SetIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SetIndex")
				return
			}
		case "state":
			z.State, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "healing":
			z.Healing, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Healing")
				return
			}
		case "size":
			z.Size, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "used":
			z.Used, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Used")
				return
			}
		case "available":
			z.Available, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Available")
				return
			}
		case "uuid":
			z.UUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DriveResource) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 4 + msgp.IntSize + 12 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Path) + 7 + msgp.StringPrefixSize + len(z.NodeID) + 10 + msgp.IntSize + 9 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.State) + 8 + msgp.BoolSize + 5 + msgp.Uint64Size + 5 + msgp.Uint64Size + 10 + msgp.Uint64Size + 5 + msgp.StringPrefixSize + len(z.UUID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ErasureSetResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "poolIndex":
			z.PoolIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "setIndex":
			z.SetIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SetIndex")
				return
			}
		case "driveCount":
			z.DriveCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DriveCount")
				return
			}
		case "offlineDrives":
			z.OfflineDrives, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OfflineDrives")
				return
			}
		case "onlineDrives":
			z.OnlineDrives, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OnlineDrives")
				return
			}
		case "healDisks":
			z.HealDisks, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "HealDisks")
				return
			}
		case "readQuorum":
			z.ReadQuorum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ReadQuorum")
				return
			}
		case "writeQuorum":
			z.WriteQuorum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "WriteQuorum")
				return
			}
		case "nodes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]string, zb0002)
			}
			for za0001 := range z.Nodes {
				z.Nodes[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
			}
		case "rawUsage":
			z.RawUsage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RawUsage")
				return
			}
		case "rawCapacity":
			z.RawCapacity, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RawCapacity")
				return
			}
		case "usage":
			z.Usage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "objectsCount":
			z.ObjectsCount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ObjectsCount")
				return
			}
		case "versionsCount":
			z.VersionsCount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "VersionsCount")
				return
			}
		case "deleteMarkersCount":
			z.DeleteMarkersCount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkersCount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ErasureSetResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 15
	// write "poolIndex"
	err = en.Append(0x8f, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PoolIndex)
	if err != nil {
		err = msgp.WrapError(err, "PoolIndex")
		return
	}
	// write "setIndex"
	err = en.Append(0xa8, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SetIndex)
	if err != nil {
		err = msgp.WrapError(err, "SetIndex")
		return
	}
	// write "driveCount"
	err = en.Append(0xaa, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DriveCount)
	if err != nil {
		err = msgp.WrapError(err, "DriveCount")
		return
	}
	// write "offlineDrives"
	err = en.Append(0xad, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OfflineDrives)
	if err != nil {
		err = msgp.WrapError(err, "OfflineDrives")
		return
	}
	// write "onlineDrives"
	err = en.Append(0xac, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OnlineDrives)
	if err != nil {
		err = msgp.WrapError(err, "OnlineDrives")
		return
	}
	// write "healDisks"
	err = en.Append(0xa9, 0x68, 0x65, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HealDisks)
	if err != nil {
		err = msgp.WrapError(err, "HealDisks")
		return
	}
	// write "readQuorum"
	err = en.Append(0xaa, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ReadQuorum)
	if err != nil {
		err = msgp.WrapError(err, "ReadQuorum")
		return
	}
	// write "writeQuorum"
	err = en.Append(0xab, 0x77, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.WriteQuorum)
	if err != nil {
		err = msgp.WrapError(err, "WriteQuorum")
		return
	}
	// write "nodes"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x64, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Nodes)))
	if err != nil {
		err = msgp.WrapError(err, "Nodes")
		return
	}
	for za0001 := range z.Nodes {
		err = en.WriteString(z.Nodes[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0001)
			return
		}
	}
	// write "rawUsage"
	err = en.Append(0xa8, 0x72, 0x61, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RawUsage)
	if err != nil {
		err = msgp.WrapError(err, "RawUsage")
		return
	}
	// write "rawCapacity"
	err = en.Append(0xab, 0x72, 0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RawCapacity)
	if err != nil {
		err = msgp.WrapError(err, "RawCapacity")
		return
	}
	// write "usage"
	err = en.Append(0xa5, 0x75, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Usage)
	if err != nil {
		err = msgp.WrapError(err, "Usage")
		return
	}
	// write "objectsCount"
	err = en.Append(0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ObjectsCount)
	if err != nil {
		err = msgp.WrapError(err, "ObjectsCount")
		return
	}
	// write "versionsCount"
	err = en.Append(0xad, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.VersionsCount)
	if err != nil {
		err = msgp.WrapError(err, "VersionsCount")
		return
	}
	// write "deleteMarkersCount"
	err = en.Append(0xb2, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DeleteMarkersCount)
	if err != nil {
		err = msgp.WrapError(err, "DeleteMarkersCount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ErasureSetResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 15
	// string "poolIndex"
	o = append(o, 0x8f, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.PoolIndex)
	// string "setIndex"
	o = append(o, 0xa8, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.SetIndex)
	// string "driveCount"
	o = append(o, 0xaa, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.DriveCount)
	// string "offlineDrives"
	o = append(o, 0xad, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
	o = msgp.AppendInt(o, z.OfflineDrives)
	// string "onlineDrives"
	o = append(o, 0xac, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
	o = msgp.AppendInt(o, z.OnlineDrives)
	// string "healDisks"
	o = append(o, 0xa9, 0x68, 0x65, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x73)
	o = msgp.AppendInt(o, z.HealDisks)
	// string "readQuorum"
	o = append(o, 0xaa, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ReadQuorum)
	// string "writeQuorum"
	o = append(o, 0xab, 0x77, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.WriteQuorum)
	// string "nodes"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Nodes)))
	for za0001 := range z.Nodes {
		o = msgp.AppendString(o, z.Nodes[za0001])
	}
	// string "rawUsage"
	o = append(o, 0xa8, 0x72, 0x61, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint64(o, z.RawUsage)
	// string "rawCapacity"
	o = append(o, 0xab, 0x72, 0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	o = msgp.AppendUint64(o, z.RawCapacity)
	// string "usage"
	o = append(o, 0xa5, 0x75, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint64(o, z.Usage)
	// string "objectsCount"
	o = append(o, 0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.ObjectsCount)
	// string "versionsCount"
	o = append(o, 0xad, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.VersionsCount)
	// string "deleteMarkersCount"
	o = append(o, 0xb2, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.DeleteMarkersCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ErasureSetResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "poolIndex":
			z.PoolIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "setIndex":
			z.SetIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SetIndex")
				return
			}
		case "driveCount":
			z.DriveCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DriveCount")
				return
			}
		case "offlineDrives":
			z.OfflineDrives, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OfflineDrives")
				return
			}
		case "onlineDrives":
			z.OnlineDrives, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OnlineDrives")
				return
			}
		case "healDisks":
			z.HealDisks, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HealDisks")
				return
			}
		case "readQuorum":
			z.ReadQuorum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadQuorum")
				return
			}
		case "writeQuorum":
			z.WriteQuorum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WriteQuorum")
				return
			}
		case "nodes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]string, zb0002)
			}
			for za0001 := range z.Nodes {
				z.Nodes[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
			}
		case "rawUsage":
			z.RawUsage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawUsage")
				return
			}
		case "rawCapacity":
			z.RawCapacity, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawCapacity")
				return
			}
		case "usage":
			z.Usage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "objectsCount":
			z.ObjectsCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectsCount")
				return
			}
		case "versionsCount":
			z.VersionsCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionsCount")
				return
			}
		case "deleteMarkersCount":
			z.DeleteMarkersCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkersCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ErasureSetResource) Msgsize() (s int) {
	s = 1 + 10 + msgp.IntSize + 9 + msgp.IntSize + 11 + msgp.IntSize + 14 + msgp.IntSize + 13 + msgp.IntSize + 10 + msgp.IntSize + 11 + msgp.IntSize + 12 + msgp.IntSize + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Nodes {
		s += msgp.StringPrefixSize + len(z.Nodes[za0001])
	}
	s += 9 + msgp.Uint64Size + 12 + msgp.Uint64Size + 6 + msgp.Uint64Size + 13 + msgp.Uint64Size + 14 + msgp.Uint64Size + 19 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NodeResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "host":
			z.Host, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "commitId":
			z.CommitID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CommitID")
				return
			}
		case "uptime":
			z.Uptime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Uptime")
				return
			}
		case "state":
			z.State, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "totalDrives":
			z.TotalDrives, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TotalDrives")
				return
			}
		case "driveCounts":
			err = z.DriveCounts.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "DriveCounts")
				return
			}
		case "poolIndex":
			z.PoolIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "poolIndexes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PoolIndexes")
				return
			}
			if cap(z.PoolIndexes) >= int(zb0002) {
				z.PoolIndexes = (z.PoolIndexes)[:zb0002]
			} else {
				z.PoolIndexes = make([]int, zb0002)
			}
			for za0001 := range z.PoolIndexes {
				z.PoolIndexes[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "PoolIndexes", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NodeResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "host"
	err = en.Append(0x89, 0xa4, 0x68, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Host)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// write "version"
	err = en.Append(0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "commitId"
	err = en.Append(0xa8, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.CommitID)
	if err != nil {
		err = msgp.WrapError(err, "CommitID")
		return
	}
	// write "uptime"
	err = en.Append(0xa6, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Uptime)
	if err != nil {
		err = msgp.WrapError(err, "Uptime")
		return
	}
	// write "state"
	err = en.Append(0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.State)
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// write "totalDrives"
	err = en.Append(0xab, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TotalDrives)
	if err != nil {
		err = msgp.WrapError(err, "TotalDrives")
		return
	}
	// write "driveCounts"
	err = en.Append(0xab, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = z.DriveCounts.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "DriveCounts")
		return
	}
	// write "poolIndex"
	err = en.Append(0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PoolIndex)
	if err != nil {
		err = msgp.WrapError(err, "PoolIndex")
		return
	}
	// write "poolIndexes"
	err = en.Append(0xab, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PoolIndexes)))
	if err != nil {
		err = msgp.WrapError(err, "PoolIndexes")
		return
	}
	for za0001 := range z.PoolIndexes {
		err = en.WriteInt(z.PoolIndexes[za0001])
		if err != nil {
			err = msgp.WrapError(err, "PoolIndexes", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NodeResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "host"
	o = append(o, 0x89, 0xa4, 0x68, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.Host)
	// string "version"
	o = append(o, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Version)
	// string "commitId"
	o = append(o, 0xa8, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64)
	o = msgp.AppendString(o, z.CommitID)
	// string "uptime"
	o = append(o, 0xa6, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.Uptime)
	// string "state"
	o = append(o, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o = msgp.AppendString(o, z.State)
	// string "totalDrives"
	o = append(o, 0xab, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73)
	o = msgp.AppendInt(o, z.TotalDrives)
	// string "driveCounts"
	o = append(o, 0xab, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o, err = z.DriveCounts.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "DriveCounts")
		return
	}
	// string "poolIndex"
	o = append(o, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.PoolIndex)
	// string "poolIndexes"
	o = append(o, 0xab, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PoolIndexes)))
	for za0001 := range z.PoolIndexes {
		o = msgp.AppendInt(o, z.PoolIndexes[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "host":
			z.Host, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "commitId":
			z.CommitID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CommitID")
				return
			}
		case "uptime":
			z.Uptime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uptime")
				return
			}
		case "state":
			z.State, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "totalDrives":
			z.TotalDrives, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalDrives")
				return
			}
		case "driveCounts":
			bts, err = z.DriveCounts.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "DriveCounts")
				return
			}
		case "poolIndex":
			z.PoolIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "poolIndexes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolIndexes")
				return
			}
			if cap(z.PoolIndexes) >= int(zb0002) {
				z.PoolIndexes = (z.PoolIndexes)[:zb0002]
			} else {
				z.PoolIndexes = make([]int, zb0002)
			}
			for za0001 := range z.PoolIndexes {
				z.PoolIndexes[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PoolIndexes", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NodeResource) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Host) + 8 + msgp.StringPrefixSize + len(z.Version) + 9 + msgp.StringPrefixSize + len(z.CommitID) + 7 + msgp.Int64Size + 6 + msgp.StringPrefixSize + len(z.State) + 12 + msgp.IntSize + 12 + z.DriveCounts.Msgsize() + 10 + msgp.IntSize + 12 + msgp.ArrayHeaderSize + (len(z.PoolIndexes) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PaginatedDrivesResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]DriveResource, zb0002)
			}
			for za0001 := range z.Results {
				err = z.Results[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PaginatedDrivesResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "results"
	err = en.Append(0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Results)))
	if err != nil {
		err = msgp.WrapError(err, "Results")
		return
	}
	for za0001 := range z.Results {
		err = z.Results[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// write "count"
	err = en.Append(0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PaginatedDrivesResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "results"
	o = append(o, 0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Results)))
	for za0001 := range z.Results {
		o, err = z.Results[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// string "count"
	o = append(o, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PaginatedDrivesResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]DriveResource, zb0002)
			}
			for za0001 := range z.Results {
				bts, err = z.Results[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PaginatedDrivesResponse) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Results {
		s += z.Results[za0001].Msgsize()
	}
	s += 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PaginatedErasureSetsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]ErasureSetResource, zb0002)
			}
			for za0001 := range z.Results {
				err = z.Results[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PaginatedErasureSetsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "results"
	err = en.Append(0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Results)))
	if err != nil {
		err = msgp.WrapError(err, "Results")
		return
	}
	for za0001 := range z.Results {
		err = z.Results[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// write "count"
	err = en.Append(0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PaginatedErasureSetsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "results"
	o = append(o, 0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Results)))
	for za0001 := range z.Results {
		o, err = z.Results[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// string "count"
	o = append(o, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PaginatedErasureSetsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]ErasureSetResource, zb0002)
			}
			for za0001 := range z.Results {
				bts, err = z.Results[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PaginatedErasureSetsResponse) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Results {
		s += z.Results[za0001].Msgsize()
	}
	s += 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PaginatedNodesResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]NodeResource, zb0002)
			}
			for za0001 := range z.Results {
				err = z.Results[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PaginatedNodesResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "results"
	err = en.Append(0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Results)))
	if err != nil {
		err = msgp.WrapError(err, "Results")
		return
	}
	for za0001 := range z.Results {
		err = z.Results[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// write "count"
	err = en.Append(0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PaginatedNodesResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "results"
	o = append(o, 0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Results)))
	for za0001 := range z.Results {
		o, err = z.Results[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// string "count"
	o = append(o, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PaginatedNodesResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]NodeResource, zb0002)
			}
			for za0001 := range z.Results {
				bts, err = z.Results[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PaginatedNodesResponse) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Results {
		s += z.Results[za0001].Msgsize()
	}
	s += 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PaginatedPoolsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]PoolResource, zb0002)
			}
			for za0001 := range z.Results {
				err = z.Results[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PaginatedPoolsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "results"
	err = en.Append(0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Results)))
	if err != nil {
		err = msgp.WrapError(err, "Results")
		return
	}
	for za0001 := range z.Results {
		err = z.Results[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// write "count"
	err = en.Append(0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PaginatedPoolsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "results"
	o = append(o, 0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Results)))
	for za0001 := range z.Results {
		o, err = z.Results[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// string "count"
	o = append(o, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PaginatedPoolsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]PoolResource, zb0002)
			}
			for za0001 := range z.Results {
				bts, err = z.Results[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PaginatedPoolsResponse) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Results {
		s += z.Results[za0001].Msgsize()
	}
	s += 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolLayout) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "servers":
			z.Servers, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Servers")
				return
			}
		case "drives":
			z.Drives, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Drives")
				return
			}
		case "drivesOffline":
			z.DrivesOffline, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DrivesOffline")
				return
			}
		case "drivesHealing":
			z.DrivesHealing, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DrivesHealing")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolLayout) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "servers"
	err = en.Append(0x84, 0xa7, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Servers)
	if err != nil {
		err = msgp.WrapError(err, "Servers")
		return
	}
	// write "drives"
	err = en.Append(0xa6, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Drives)
	if err != nil {
		err = msgp.WrapError(err, "Drives")
		return
	}
	// write "drivesOffline"
	err = en.Append(0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DrivesOffline)
	if err != nil {
		err = msgp.WrapError(err, "DrivesOffline")
		return
	}
	// write "drivesHealing"
	err = en.Append(0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DrivesHealing)
	if err != nil {
		err = msgp.WrapError(err, "DrivesHealing")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolLayout) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "servers"
	o = append(o, 0x84, 0xa7, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73)
	o = msgp.AppendInt(o, z.Servers)
	// string "drives"
	o = append(o, 0xa6, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73)
	o = msgp.AppendInt(o, z.Drives)
	// string "drivesOffline"
	o = append(o, 0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendInt(o, z.DrivesOffline)
	// string "drivesHealing"
	o = append(o, 0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	o = msgp.AppendInt(o, z.DrivesHealing)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolLayout) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "servers":
			z.Servers, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Servers")
				return
			}
		case "drives":
			z.Drives, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Drives")
				return
			}
		case "drivesOffline":
			z.DrivesOffline, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DrivesOffline")
				return
			}
		case "drivesHealing":
			z.DrivesHealing, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DrivesHealing")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolLayout) Msgsize() (s int) {
	s = 1 + 8 + msgp.IntSize + 7 + msgp.IntSize + 14 + msgp.IntSize + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "poolindex":
			z.PoolIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "stripeSize":
			z.StripeSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StripeSize")
				return
			}
		case "totalSets":
			z.TotalSets, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TotalSets")
				return
			}
		case "writeQuorum":
			z.WriteQuorum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "WriteQuorum")
				return
			}
		case "readQuorum":
			z.ReadQuorum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ReadQuorum")
				return
			}
		case "nodes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]string, zb0002)
			}
			for za0001 := range z.Nodes {
				z.Nodes[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
			}
		case "driveCount":
			z.DriveCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DriveCount")
				return
			}
		case "drivesOnline":
			z.DrivesOnline, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DrivesOnline")
				return
			}
		case "drivesOffline":
			z.DrivesOffline, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DrivesOffline")
				return
			}
		case "drivesHealing":
			z.DrivesHealing, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DrivesHealing")
				return
			}
		case "nodeCount":
			z.NodeCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeCount")
				return
			}
		case "rawUsage":
			z.RawUsage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RawUsage")
				return
			}
		case "rawCapacity":
			z.RawCapacity, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RawCapacity")
				return
			}
		case "usage":
			z.Usage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "objectsCount":
			z.ObjectsCount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ObjectsCount")
				return
			}
		case "versionsCount":
			z.VersionsCount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "VersionsCount")
				return
			}
		case "deleteMarkersCount":
			z.DeleteMarkersCount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkersCount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 17
	// write "poolindex"
	err = en.Append(0xde, 0x0, 0x11, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PoolIndex)
	if err != nil {
		err = msgp.WrapError(err, "PoolIndex")
		return
	}
	// write "stripeSize"
	err = en.Append(0xaa, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StripeSize)
	if err != nil {
		err = msgp.WrapError(err, "StripeSize")
		return
	}
	// write "totalSets"
	err = en.Append(0xa9, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TotalSets)
	if err != nil {
		err = msgp.WrapError(err, "TotalSets")
		return
	}
	// write "writeQuorum"
	err = en.Append(0xab, 0x77, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.WriteQuorum)
	if err != nil {
		err = msgp.WrapError(err, "WriteQuorum")
		return
	}
	// write "readQuorum"
	err = en.Append(0xaa, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ReadQuorum)
	if err != nil {
		err = msgp.WrapError(err, "ReadQuorum")
		return
	}
	// write "nodes"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x64, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Nodes)))
	if err != nil {
		err = msgp.WrapError(err, "Nodes")
		return
	}
	for za0001 := range z.Nodes {
		err = en.WriteString(z.Nodes[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0001)
			return
		}
	}
	// write "driveCount"
	err = en.Append(0xaa, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DriveCount)
	if err != nil {
		err = msgp.WrapError(err, "DriveCount")
		return
	}
	// write "drivesOnline"
	err = en.Append(0xac, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DrivesOnline)
	if err != nil {
		err = msgp.WrapError(err, "DrivesOnline")
		return
	}
	// write "drivesOffline"
	err = en.Append(0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DrivesOffline)
	if err != nil {
		err = msgp.WrapError(err, "DrivesOffline")
		return
	}
	// write "drivesHealing"
	err = en.Append(0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DrivesHealing)
	if err != nil {
		err = msgp.WrapError(err, "DrivesHealing")
		return
	}
	// write "nodeCount"
	err = en.Append(0xa9, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeCount)
	if err != nil {
		err = msgp.WrapError(err, "NodeCount")
		return
	}
	// write "rawUsage"
	err = en.Append(0xa8, 0x72, 0x61, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RawUsage)
	if err != nil {
		err = msgp.WrapError(err, "RawUsage")
		return
	}
	// write "rawCapacity"
	err = en.Append(0xab, 0x72, 0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RawCapacity)
	if err != nil {
		err = msgp.WrapError(err, "RawCapacity")
		return
	}
	// write "usage"
	err = en.Append(0xa5, 0x75, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Usage)
	if err != nil {
		err = msgp.WrapError(err, "Usage")
		return
	}
	// write "objectsCount"
	err = en.Append(0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ObjectsCount)
	if err != nil {
		err = msgp.WrapError(err, "ObjectsCount")
		return
	}
	// write "versionsCount"
	err = en.Append(0xad, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.VersionsCount)
	if err != nil {
		err = msgp.WrapError(err, "VersionsCount")
		return
	}
	// write "deleteMarkersCount"
	err = en.Append(0xb2, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DeleteMarkersCount)
	if err != nil {
		err = msgp.WrapError(err, "DeleteMarkersCount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 17
	// string "poolindex"
	o = append(o, 0xde, 0x0, 0x11, 0xa9, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.PoolIndex)
	// string "stripeSize"
	o = append(o, 0xaa, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.StripeSize)
	// string "totalSets"
	o = append(o, 0xa9, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x73)
	o = msgp.AppendInt(o, z.TotalSets)
	// string "writeQuorum"
	o = append(o, 0xab, 0x77, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.WriteQuorum)
	// string "readQuorum"
	o = append(o, 0xaa, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ReadQuorum)
	// string "nodes"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Nodes)))
	for za0001 := range z.Nodes {
		o = msgp.AppendString(o, z.Nodes[za0001])
	}
	// string "driveCount"
	o = append(o, 0xaa, 0x64, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.DriveCount)
	// string "drivesOnline"
	o = append(o, 0xac, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendInt(o, z.DrivesOnline)
	// string "drivesOffline"
	o = append(o, 0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendInt(o, z.DrivesOffline)
	// string "drivesHealing"
	o = append(o, 0xad, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67)
	o = msgp.AppendInt(o, z.DrivesHealing)
	// string "nodeCount"
	o = append(o, 0xa9, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.NodeCount)
	// string "rawUsage"
	o = append(o, 0xa8, 0x72, 0x61, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint64(o, z.RawUsage)
	// string "rawCapacity"
	o = append(o, 0xab, 0x72, 0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	o = msgp.AppendUint64(o, z.RawCapacity)
	// string "usage"
	o = append(o, 0xa5, 0x75, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint64(o, z.Usage)
	// string "objectsCount"
	o = append(o, 0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.ObjectsCount)
	// string "versionsCount"
	o = append(o, 0xad, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.VersionsCount)
	// string "deleteMarkersCount"
	o = append(o, 0xb2, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.DeleteMarkersCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "poolindex":
			z.PoolIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolIndex")
				return
			}
		case "stripeSize":
			z.StripeSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StripeSize")
				return
			}
		case "totalSets":
			z.TotalSets, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalSets")
				return
			}
		case "writeQuorum":
			z.WriteQuorum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WriteQuorum")
				return
			}
		case "readQuorum":
			z.ReadQuorum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadQuorum")
				return
			}
		case "nodes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]string, zb0002)
			}
			for za0001 := range z.Nodes {
				z.Nodes[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
			}
		case "driveCount":
			z.DriveCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DriveCount")
				return
			}
		case "drivesOnline":
			z.DrivesOnline, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DrivesOnline")
				return
			}
		case "drivesOffline":
			z.DrivesOffline, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DrivesOffline")
				return
			}
		case "drivesHealing":
			z.DrivesHealing, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DrivesHealing")
				return
			}
		case "nodeCount":
			z.NodeCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeCount")
				return
			}
		case "rawUsage":
			z.RawUsage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawUsage")
				return
			}
		case "rawCapacity":
			z.RawCapacity, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawCapacity")
				return
			}
		case "usage":
			z.Usage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "objectsCount":
			z.ObjectsCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectsCount")
				return
			}
		case "versionsCount":
			z.VersionsCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionsCount")
				return
			}
		case "deleteMarkersCount":
			z.DeleteMarkersCount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarkersCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolResource) Msgsize() (s int) {
	s = 3 + 10 + msgp.IntSize + 11 + msgp.IntSize + 10 + msgp.IntSize + 12 + msgp.IntSize + 11 + msgp.IntSize + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Nodes {
		s += msgp.StringPrefixSize + len(z.Nodes[za0001])
	}
	s += 11 + msgp.IntSize + 13 + msgp.IntSize + 14 + msgp.IntSize + 14 + msgp.IntSize + 10 + msgp.IntSize + 9 + msgp.Uint64Size + 12 + msgp.Uint64Size + 6 + msgp.Uint64Size + 13 + msgp.Uint64Size + 14 + msgp.Uint64Size + 19 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ServicesResourceInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ldap":
			err = z.LDAP.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LDAP")
				return
			}
			zb0001Mask |= 0x1
		case "logger":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Logger")
				return
			}
			if cap(z.Logger) >= int(zb0002) {
				z.Logger = (z.Logger)[:zb0002]
			} else {
				z.Logger = make([]Logger, zb0002)
			}
			for za0001 := range z.Logger {
				err = z.Logger[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Logger", za0001)
					return
				}
			}
			zb0001Mask |= 0x2
		case "audit":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Audit")
				return
			}
			if cap(z.Audit) >= int(zb0003) {
				z.Audit = (z.Audit)[:zb0003]
			} else {
				z.Audit = make([]Audit, zb0003)
			}
			for za0002 := range z.Audit {
				err = z.Audit[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Audit", za0002)
					return
				}
			}
			zb0001Mask |= 0x4
		case "notifications":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Notifications")
				return
			}
			if cap(z.Notifications) >= int(zb0004) {
				z.Notifications = (z.Notifications)[:zb0004]
			} else {
				z.Notifications = make([]map[string][]TargetIDStatus, zb0004)
			}
			for za0003 := range z.Notifications {
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Notifications", za0003)
					return
				}
				if z.Notifications[za0003] == nil {
					z.Notifications[za0003] = make(map[string][]TargetIDStatus, zb0005)
				} else if len(z.Notifications[za0003]) > 0 {
					for key := range z.Notifications[za0003] {
						delete(z.Notifications[za0003], key)
					}
				}
				for zb0005 > 0 {
					zb0005--
					var za0004 string
					var za0005 []TargetIDStatus
					za0004, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Notifications", za0003)
						return
					}
					var zb0006 uint32
					zb0006, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Notifications", za0003, za0004)
						return
					}
					if cap(za0005) >= int(zb0006) {
						za0005 = (za0005)[:zb0006]
					} else {
						za0005 = make([]TargetIDStatus, zb0006)
					}
					for za0006 := range za0005 {
						err = za0005[za0006].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Notifications", za0003, za0004, za0006)
							return
						}
					}
					z.Notifications[za0003][za0004] = za0005
				}
			}
			zb0001Mask |= 0x8
		case "kms":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "KMSStatus")
				return
			}
			if cap(z.KMSStatus) >= int(zb0007) {
				z.KMSStatus = (z.KMSStatus)[:zb0007]
			} else {
				z.KMSStatus = make([]KMS, zb0007)
			}
			for za0007 := range z.KMSStatus {
				err = z.KMSStatus[za0007].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "KMSStatus", za0007)
					return
				}
			}
			zb0001Mask |= 0x10
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1f {
		if (zb0001Mask & 0x1) == 0 {
			z.LDAP = LDAP{}
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Logger = nil
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Audit = nil
		}
		if (zb0001Mask & 0x8) == 0 {
			z.Notifications = nil
		}
		if (zb0001Mask & 0x10) == 0 {
			z.KMSStatus = nil
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ServicesResourceInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Logger == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Audit == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Notifications == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.KMSStatus == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "ldap"
		err = en.Append(0xa4, 0x6c, 0x64, 0x61, 0x70)
		if err != nil {
			return
		}
		err = z.LDAP.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "LDAP")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "logger"
			err = en.Append(0xa6, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Logger)))
			if err != nil {
				err = msgp.WrapError(err, "Logger")
				return
			}
			for za0001 := range z.Logger {
				err = z.Logger[za0001].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Logger", za0001)
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "audit"
			err = en.Append(0xa5, 0x61, 0x75, 0x64, 0x69, 0x74)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Audit)))
			if err != nil {
				err = msgp.WrapError(err, "Audit")
				return
			}
			for za0002 := range z.Audit {
				err = z.Audit[za0002].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Audit", za0002)
					return
				}
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "notifications"
			err = en.Append(0xad, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Notifications)))
			if err != nil {
				err = msgp.WrapError(err, "Notifications")
				return
			}
			for za0003 := range z.Notifications {
				err = en.WriteMapHeader(uint32(len(z.Notifications[za0003])))
				if err != nil {
					err = msgp.WrapError(err, "Notifications", za0003)
					return
				}
				for za0004, za0005 := range z.Notifications[za0003] {
					err = en.WriteString(za0004)
					if err != nil {
						err = msgp.WrapError(err, "Notifications", za0003)
						return
					}
					err = en.WriteArrayHeader(uint32(len(za0005)))
					if err != nil {
						err = msgp.WrapError(err, "Notifications", za0003, za0004)
						return
					}
					for za0006 := range za0005 {
						err = za0005[za0006].EncodeMsg(en)
						if err != nil {
							err = msgp.WrapError(err, "Notifications", za0003, za0004, za0006)
							return
						}
					}
				}
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// write "kms"
			err = en.Append(0xa3, 0x6b, 0x6d, 0x73)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.KMSStatus)))
			if err != nil {
				err = msgp.WrapError(err, "KMSStatus")
				return
			}
			for za0007 := range z.KMSStatus {
				err = z.KMSStatus[za0007].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "KMSStatus", za0007)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ServicesResourceInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Logger == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Audit == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Notifications == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.KMSStatus == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "ldap"
		o = append(o, 0xa4, 0x6c, 0x64, 0x61, 0x70)
		o, err = z.LDAP.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "LDAP")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "logger"
			o = append(o, 0xa6, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Logger)))
			for za0001 := range z.Logger {
				o, err = z.Logger[za0001].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Logger", za0001)
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "audit"
			o = append(o, 0xa5, 0x61, 0x75, 0x64, 0x69, 0x74)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Audit)))
			for za0002 := range z.Audit {
				o, err = z.Audit[za0002].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Audit", za0002)
					return
				}
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "notifications"
			o = append(o, 0xad, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Notifications)))
			for za0003 := range z.Notifications {
				o = msgp.AppendMapHeader(o, uint32(len(z.Notifications[za0003])))
				for za0004, za0005 := range z.Notifications[za0003] {
					o = msgp.AppendString(o, za0004)
					o = msgp.AppendArrayHeader(o, uint32(len(za0005)))
					for za0006 := range za0005 {
						o, err = za0005[za0006].MarshalMsg(o)
						if err != nil {
							err = msgp.WrapError(err, "Notifications", za0003, za0004, za0006)
							return
						}
					}
				}
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "kms"
			o = append(o, 0xa3, 0x6b, 0x6d, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.KMSStatus)))
			for za0007 := range z.KMSStatus {
				o, err = z.KMSStatus[za0007].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "KMSStatus", za0007)
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ServicesResourceInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ldap":
			bts, err = z.LDAP.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LDAP")
				return
			}
			zb0001Mask |= 0x1
		case "logger":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Logger")
				return
			}
			if cap(z.Logger) >= int(zb0002) {
				z.Logger = (z.Logger)[:zb0002]
			} else {
				z.Logger = make([]Logger, zb0002)
			}
			for za0001 := range z.Logger {
				bts, err = z.Logger[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Logger", za0001)
					return
				}
			}
			zb0001Mask |= 0x2
		case "audit":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Audit")
				return
			}
			if cap(z.Audit) >= int(zb0003) {
				z.Audit = (z.Audit)[:zb0003]
			} else {
				z.Audit = make([]Audit, zb0003)
			}
			for za0002 := range z.Audit {
				bts, err = z.Audit[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Audit", za0002)
					return
				}
			}
			zb0001Mask |= 0x4
		case "notifications":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Notifications")
				return
			}
			if cap(z.Notifications) >= int(zb0004) {
				z.Notifications = (z.Notifications)[:zb0004]
			} else {
				z.Notifications = make([]map[string][]TargetIDStatus, zb0004)
			}
			for za0003 := range z.Notifications {
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Notifications", za0003)
					return
				}
				if z.Notifications[za0003] == nil {
					z.Notifications[za0003] = make(map[string][]TargetIDStatus, zb0005)
				} else if len(z.Notifications[za0003]) > 0 {
					for key := range z.Notifications[za0003] {
						delete(z.Notifications[za0003], key)
					}
				}
				for zb0005 > 0 {
					var za0004 string
					var za0005 []TargetIDStatus
					zb0005--
					za0004, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Notifications", za0003)
						return
					}
					var zb0006 uint32
					zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Notifications", za0003, za0004)
						return
					}
					if cap(za0005) >= int(zb0006) {
						za0005 = (za0005)[:zb0006]
					} else {
						za0005 = make([]TargetIDStatus, zb0006)
					}
					for za0006 := range za0005 {
						bts, err = za0005[za0006].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Notifications", za0003, za0004, za0006)
							return
						}
					}
					z.Notifications[za0003][za0004] = za0005
				}
			}
			zb0001Mask |= 0x8
		case "kms":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "KMSStatus")
				return
			}
			if cap(z.KMSStatus) >= int(zb0007) {
				z.KMSStatus = (z.KMSStatus)[:zb0007]
			} else {
				z.KMSStatus = make([]KMS, zb0007)
			}
			for za0007 := range z.KMSStatus {
				bts, err = z.KMSStatus[za0007].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "KMSStatus", za0007)
					return
				}
			}
			zb0001Mask |= 0x10
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	// Clear omitted fields.
	if zb0001Mask != 0x1f {
		if (zb0001Mask & 0x1) == 0 {
			z.LDAP = LDAP{}
		}
		if (zb0001Mask & 0x2) == 0 {
			z.Logger = nil
		}
		if (zb0001Mask & 0x4) == 0 {
			z.Audit = nil
		}
		if (zb0001Mask & 0x8) == 0 {
			z.Notifications = nil
		}
		if (zb0001Mask & 0x10) == 0 {
			z.KMSStatus = nil
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ServicesResourceInfo) Msgsize() (s int) {
	s = 1 + 5 + z.LDAP.Msgsize() + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Logger {
		s += z.Logger[za0001].Msgsize()
	}
	s += 6 + msgp.ArrayHeaderSize
	for za0002 := range z.Audit {
		s += z.Audit[za0002].Msgsize()
	}
	s += 14 + msgp.ArrayHeaderSize
	for za0003 := range z.Notifications {
		s += msgp.MapHeaderSize
		if z.Notifications[za0003] != nil {
			for za0004, za0005 := range z.Notifications[za0003] {
				_ = za0005
				s += msgp.StringPrefixSize + len(za0004) + msgp.ArrayHeaderSize
				for za0006 := range za0005 {
					s += za0005[za0006].Msgsize()
				}
			}
		}
	}
	s += 4 + msgp.ArrayHeaderSize
	for za0007 := range z.KMSStatus {
		s += z.KMSStatus[za0007].Msgsize()
	}
	return
}
