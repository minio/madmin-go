package event

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *API) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Time":
			z.Time, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Node":
			z.Node, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Node")
				return
			}
		case "Origin":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Origin")
					return
				}
				z.Origin = Origin(zb0002)
			}
		case "Type":
			{
				var zb0003 string
				zb0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = APIType(zb0003)
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Bucket":
			z.Bucket, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		case "Object":
			z.Object, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		case "VersionID":
			z.VersionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "Tags":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0004)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "CallInfo":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CallInfo")
					return
				}
				z.CallInfo = nil
			} else {
				if z.CallInfo == nil {
					z.CallInfo = new(CallInfo)
				}
				err = z.CallInfo.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "CallInfo")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *API) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "Version"
	err = en.Append(0x8b, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Time"
	err = en.Append(0xa4, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// write "Node"
	err = en.Append(0xa4, 0x4e, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Node)
	if err != nil {
		err = msgp.WrapError(err, "Node")
		return
	}
	// write "Origin"
	err = en.Append(0xa6, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.Origin))
	if err != nil {
		err = msgp.WrapError(err, "Origin")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Bucket"
	err = en.Append(0xa6, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bucket)
	if err != nil {
		err = msgp.WrapError(err, "Bucket")
		return
	}
	// write "Object"
	err = en.Append(0xa6, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Object)
	if err != nil {
		err = msgp.WrapError(err, "Object")
		return
	}
	// write "VersionID"
	err = en.Append(0xa9, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.VersionID)
	if err != nil {
		err = msgp.WrapError(err, "VersionID")
		return
	}
	// write "Tags"
	err = en.Append(0xa4, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001, za0002 := range z.Tags {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Tags")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "CallInfo"
	err = en.Append(0xa8, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	if z.CallInfo == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.CallInfo.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "CallInfo")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *API) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "Version"
	o = append(o, 0x8b, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Version)
	// string "Time"
	o = append(o, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.Time)
	// string "Node"
	o = append(o, 0xa4, 0x4e, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.Node)
	// string "Origin"
	o = append(o, 0xa6, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	o = msgp.AppendString(o, string(z.Origin))
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, string(z.Type))
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Bucket"
	o = append(o, 0xa6, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	o = msgp.AppendString(o, z.Bucket)
	// string "Object"
	o = append(o, 0xa6, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74)
	o = msgp.AppendString(o, z.Object)
	// string "VersionID"
	o = append(o, 0xa9, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.VersionID)
	// string "Tags"
	o = append(o, 0xa4, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Tags)))
	for za0001, za0002 := range z.Tags {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "CallInfo"
	o = append(o, 0xa8, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f)
	if z.CallInfo == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.CallInfo.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "CallInfo")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *API) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Time":
			z.Time, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Node":
			z.Node, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Node")
				return
			}
		case "Origin":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Origin")
					return
				}
				z.Origin = Origin(zb0002)
			}
		case "Type":
			{
				var zb0003 string
				zb0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = APIType(zb0003)
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Bucket":
			z.Bucket, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		case "Object":
			z.Object, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		case "VersionID":
			z.VersionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "Tags":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0004)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0004 > 0 {
				var za0001 string
				var za0002 string
				zb0004--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "CallInfo":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CallInfo = nil
			} else {
				if z.CallInfo == nil {
					z.CallInfo = new(CallInfo)
				}
				bts, err = z.CallInfo.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CallInfo")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *API) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Version) + 5 + msgp.TimeSize + 5 + msgp.StringPrefixSize + len(z.Node) + 7 + msgp.StringPrefixSize + len(string(z.Origin)) + 5 + msgp.StringPrefixSize + len(string(z.Type)) + 5 + msgp.StringPrefixSize + len(z.Name) + 7 + msgp.StringPrefixSize + len(z.Bucket) + 7 + msgp.StringPrefixSize + len(z.Object) + 10 + msgp.StringPrefixSize + len(z.VersionID) + 5 + msgp.MapHeaderSize
	if z.Tags != nil {
		for za0001, za0002 := range z.Tags {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 9
	if z.CallInfo == nil {
		s += msgp.NilSize
	} else {
		s += z.CallInfo.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *APIType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = APIType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z APIType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z APIType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *APIType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = APIType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z APIType) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CallInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HTTPStatusCode":
			z.HTTPStatusCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "HTTPStatusCode")
				return
			}
		case "InputBytes":
			z.InputBytes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "InputBytes")
				return
			}
		case "OutputBytes":
			z.OutputBytes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "OutputBytes")
				return
			}
		case "HeaderBytes":
			z.HeaderBytes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "HeaderBytes")
				return
			}
		case "TimeToFirstByte":
			z.TimeToFirstByte, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TimeToFirstByte")
				return
			}
		case "TimeToResponse":
			z.TimeToResponse, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TimeToResponse")
				return
			}
		case "SourceHost":
			z.SourceHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SourceHost")
				return
			}
		case "RequestID":
			z.RequestID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		case "UserAgent":
			z.UserAgent, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		case "ReqPath":
			z.ReqPath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqPath")
				return
			}
		case "ReqHost":
			z.ReqHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
		case "ReqClaims":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			if z.ReqClaims == nil {
				z.ReqClaims = make(map[string]interface{}, zb0002)
			} else if len(z.ReqClaims) > 0 {
				for key := range z.ReqClaims {
					delete(z.ReqClaims, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 interface{}
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				za0002, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0001)
					return
				}
				z.ReqClaims[za0001] = za0002
			}
		case "ReqQuery":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqQuery")
				return
			}
			if z.ReqQuery == nil {
				z.ReqQuery = make(map[string]string, zb0003)
			} else if len(z.ReqQuery) > 0 {
				for key := range z.ReqQuery {
					delete(z.ReqQuery, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery", za0003)
					return
				}
				z.ReqQuery[za0003] = za0004
			}
		case "ReqHeader":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqHeader")
				return
			}
			if z.ReqHeader == nil {
				z.ReqHeader = make(map[string]string, zb0004)
			} else if len(z.ReqHeader) > 0 {
				for key := range z.ReqHeader {
					delete(z.ReqHeader, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0005 string
				var za0006 string
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader")
					return
				}
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader", za0005)
					return
				}
				z.ReqHeader[za0005] = za0006
			}
		case "RespHeader":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "RespHeader")
				return
			}
			if z.RespHeader == nil {
				z.RespHeader = make(map[string]string, zb0005)
			} else if len(z.RespHeader) > 0 {
				for key := range z.RespHeader {
					delete(z.RespHeader, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0007 string
				var za0008 string
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RespHeader")
					return
				}
				za0008, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RespHeader", za0007)
					return
				}
				z.RespHeader[za0007] = za0008
			}
		case "AccessKey":
			z.AccessKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		case "ParentUser":
			z.ParentUser, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CallInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 17
	// write "HTTPStatusCode"
	err = en.Append(0xde, 0x0, 0x11, 0xae, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HTTPStatusCode)
	if err != nil {
		err = msgp.WrapError(err, "HTTPStatusCode")
		return
	}
	// write "InputBytes"
	err = en.Append(0xaa, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.InputBytes)
	if err != nil {
		err = msgp.WrapError(err, "InputBytes")
		return
	}
	// write "OutputBytes"
	err = en.Append(0xab, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OutputBytes)
	if err != nil {
		err = msgp.WrapError(err, "OutputBytes")
		return
	}
	// write "HeaderBytes"
	err = en.Append(0xab, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.HeaderBytes)
	if err != nil {
		err = msgp.WrapError(err, "HeaderBytes")
		return
	}
	// write "TimeToFirstByte"
	err = en.Append(0xaf, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TimeToFirstByte)
	if err != nil {
		err = msgp.WrapError(err, "TimeToFirstByte")
		return
	}
	// write "TimeToResponse"
	err = en.Append(0xae, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TimeToResponse)
	if err != nil {
		err = msgp.WrapError(err, "TimeToResponse")
		return
	}
	// write "SourceHost"
	err = en.Append(0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.SourceHost)
	if err != nil {
		err = msgp.WrapError(err, "SourceHost")
		return
	}
	// write "RequestID"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	// write "UserAgent"
	err = en.Append(0xa9, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserAgent)
	if err != nil {
		err = msgp.WrapError(err, "UserAgent")
		return
	}
	// write "ReqPath"
	err = en.Append(0xa7, 0x52, 0x65, 0x71, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqPath)
	if err != nil {
		err = msgp.WrapError(err, "ReqPath")
		return
	}
	// write "ReqHost"
	err = en.Append(0xa7, 0x52, 0x65, 0x71, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqHost)
	if err != nil {
		err = msgp.WrapError(err, "ReqHost")
		return
	}
	// write "ReqClaims"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ReqClaims)))
	if err != nil {
		err = msgp.WrapError(err, "ReqClaims")
		return
	}
	for za0001, za0002 := range z.ReqClaims {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "ReqClaims")
			return
		}
		err = en.WriteIntf(za0002)
		if err != nil {
			err = msgp.WrapError(err, "ReqClaims", za0001)
			return
		}
	}
	// write "ReqQuery"
	err = en.Append(0xa8, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ReqQuery)))
	if err != nil {
		err = msgp.WrapError(err, "ReqQuery")
		return
	}
	for za0003, za0004 := range z.ReqQuery {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "ReqQuery")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "ReqQuery", za0003)
			return
		}
	}
	// write "ReqHeader"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ReqHeader)))
	if err != nil {
		err = msgp.WrapError(err, "ReqHeader")
		return
	}
	for za0005, za0006 := range z.ReqHeader {
		err = en.WriteString(za0005)
		if err != nil {
			err = msgp.WrapError(err, "ReqHeader")
			return
		}
		err = en.WriteString(za0006)
		if err != nil {
			err = msgp.WrapError(err, "ReqHeader", za0005)
			return
		}
	}
	// write "RespHeader"
	err = en.Append(0xaa, 0x52, 0x65, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.RespHeader)))
	if err != nil {
		err = msgp.WrapError(err, "RespHeader")
		return
	}
	for za0007, za0008 := range z.RespHeader {
		err = en.WriteString(za0007)
		if err != nil {
			err = msgp.WrapError(err, "RespHeader")
			return
		}
		err = en.WriteString(za0008)
		if err != nil {
			err = msgp.WrapError(err, "RespHeader", za0007)
			return
		}
	}
	// write "AccessKey"
	err = en.Append(0xa9, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccessKey)
	if err != nil {
		err = msgp.WrapError(err, "AccessKey")
		return
	}
	// write "ParentUser"
	err = en.Append(0xaa, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.ParentUser)
	if err != nil {
		err = msgp.WrapError(err, "ParentUser")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CallInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 17
	// string "HTTPStatusCode"
	o = append(o, 0xde, 0x0, 0x11, 0xae, 0x48, 0x54, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.HTTPStatusCode)
	// string "InputBytes"
	o = append(o, 0xaa, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.InputBytes)
	// string "OutputBytes"
	o = append(o, 0xab, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.OutputBytes)
	// string "HeaderBytes"
	o = append(o, 0xab, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.HeaderBytes)
	// string "TimeToFirstByte"
	o = append(o, 0xaf, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65)
	o = msgp.AppendString(o, z.TimeToFirstByte)
	// string "TimeToResponse"
	o = append(o, 0xae, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	o = msgp.AppendString(o, z.TimeToResponse)
	// string "SourceHost"
	o = append(o, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.SourceHost)
	// string "RequestID"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendString(o, z.RequestID)
	// string "UserAgent"
	o = append(o, 0xa9, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.UserAgent)
	// string "ReqPath"
	o = append(o, 0xa7, 0x52, 0x65, 0x71, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.ReqPath)
	// string "ReqHost"
	o = append(o, 0xa7, 0x52, 0x65, 0x71, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.ReqHost)
	// string "ReqClaims"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ReqClaims)))
	for za0001, za0002 := range z.ReqClaims {
		o = msgp.AppendString(o, za0001)
		o, err = msgp.AppendIntf(o, za0002)
		if err != nil {
			err = msgp.WrapError(err, "ReqClaims", za0001)
			return
		}
	}
	// string "ReqQuery"
	o = append(o, 0xa8, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79)
	o = msgp.AppendMapHeader(o, uint32(len(z.ReqQuery)))
	for za0003, za0004 := range z.ReqQuery {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	// string "ReqHeader"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendMapHeader(o, uint32(len(z.ReqHeader)))
	for za0005, za0006 := range z.ReqHeader {
		o = msgp.AppendString(o, za0005)
		o = msgp.AppendString(o, za0006)
	}
	// string "RespHeader"
	o = append(o, 0xaa, 0x52, 0x65, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendMapHeader(o, uint32(len(z.RespHeader)))
	for za0007, za0008 := range z.RespHeader {
		o = msgp.AppendString(o, za0007)
		o = msgp.AppendString(o, za0008)
	}
	// string "AccessKey"
	o = append(o, 0xa9, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.AccessKey)
	// string "ParentUser"
	o = append(o, 0xaa, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72)
	o = msgp.AppendString(o, z.ParentUser)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CallInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HTTPStatusCode":
			z.HTTPStatusCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HTTPStatusCode")
				return
			}
		case "InputBytes":
			z.InputBytes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InputBytes")
				return
			}
		case "OutputBytes":
			z.OutputBytes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OutputBytes")
				return
			}
		case "HeaderBytes":
			z.HeaderBytes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HeaderBytes")
				return
			}
		case "TimeToFirstByte":
			z.TimeToFirstByte, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeToFirstByte")
				return
			}
		case "TimeToResponse":
			z.TimeToResponse, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeToResponse")
				return
			}
		case "SourceHost":
			z.SourceHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceHost")
				return
			}
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		case "UserAgent":
			z.UserAgent, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		case "ReqPath":
			z.ReqPath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqPath")
				return
			}
		case "ReqHost":
			z.ReqHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
		case "ReqClaims":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			if z.ReqClaims == nil {
				z.ReqClaims = make(map[string]interface{}, zb0002)
			} else if len(z.ReqClaims) > 0 {
				for key := range z.ReqClaims {
					delete(z.ReqClaims, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 interface{}
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				za0002, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0001)
					return
				}
				z.ReqClaims[za0001] = za0002
			}
		case "ReqQuery":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqQuery")
				return
			}
			if z.ReqQuery == nil {
				z.ReqQuery = make(map[string]string, zb0003)
			} else if len(z.ReqQuery) > 0 {
				for key := range z.ReqQuery {
					delete(z.ReqQuery, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 string
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqQuery", za0003)
					return
				}
				z.ReqQuery[za0003] = za0004
			}
		case "ReqHeader":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqHeader")
				return
			}
			if z.ReqHeader == nil {
				z.ReqHeader = make(map[string]string, zb0004)
			} else if len(z.ReqHeader) > 0 {
				for key := range z.ReqHeader {
					delete(z.ReqHeader, key)
				}
			}
			for zb0004 > 0 {
				var za0005 string
				var za0006 string
				zb0004--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader")
					return
				}
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqHeader", za0005)
					return
				}
				z.ReqHeader[za0005] = za0006
			}
		case "RespHeader":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RespHeader")
				return
			}
			if z.RespHeader == nil {
				z.RespHeader = make(map[string]string, zb0005)
			} else if len(z.RespHeader) > 0 {
				for key := range z.RespHeader {
					delete(z.RespHeader, key)
				}
			}
			for zb0005 > 0 {
				var za0007 string
				var za0008 string
				zb0005--
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RespHeader")
					return
				}
				za0008, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RespHeader", za0007)
					return
				}
				z.RespHeader[za0007] = za0008
			}
		case "AccessKey":
			z.AccessKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		case "ParentUser":
			z.ParentUser, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CallInfo) Msgsize() (s int) {
	s = 3 + 15 + msgp.IntSize + 11 + msgp.Int64Size + 12 + msgp.Int64Size + 12 + msgp.Int64Size + 16 + msgp.StringPrefixSize + len(z.TimeToFirstByte) + 15 + msgp.StringPrefixSize + len(z.TimeToResponse) + 11 + msgp.StringPrefixSize + len(z.SourceHost) + 10 + msgp.StringPrefixSize + len(z.RequestID) + 10 + msgp.StringPrefixSize + len(z.UserAgent) + 8 + msgp.StringPrefixSize + len(z.ReqPath) + 8 + msgp.StringPrefixSize + len(z.ReqHost) + 10 + msgp.MapHeaderSize
	if z.ReqClaims != nil {
		for za0001, za0002 := range z.ReqClaims {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	s += 9 + msgp.MapHeaderSize
	if z.ReqQuery != nil {
		for za0003, za0004 := range z.ReqQuery {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	s += 10 + msgp.MapHeaderSize
	if z.ReqHeader != nil {
		for za0005, za0006 := range z.ReqHeader {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005) + msgp.StringPrefixSize + len(za0006)
		}
	}
	s += 11 + msgp.MapHeaderSize
	if z.RespHeader != nil {
		for za0007, za0008 := range z.RespHeader {
			_ = za0008
			s += msgp.StringPrefixSize + len(za0007) + msgp.StringPrefixSize + len(za0008)
		}
	}
	s += 10 + msgp.StringPrefixSize + len(z.AccessKey) + 11 + msgp.StringPrefixSize + len(z.ParentUser)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Origin) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Origin(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Origin) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Origin) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Origin) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Origin(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Origin) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}
