package event

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Audit) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Time":
			z.Time, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Node":
			z.Node, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Node")
				return
			}
		case "APIName":
			z.APIName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIName")
				return
			}
		case "Bucket":
			z.Bucket, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		case "Tags":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "RequestID":
			z.RequestID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		case "ReqClaims":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			if z.ReqClaims == nil {
				z.ReqClaims = make(map[string]interface{}, zb0003)
			} else if len(z.ReqClaims) > 0 {
				for key := range z.ReqClaims {
					delete(z.ReqClaims, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 interface{}
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				za0004, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0003)
					return
				}
				z.ReqClaims[za0003] = za0004
			}
		case "SourceHost":
			z.SourceHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SourceHost")
				return
			}
		case "AccessKey":
			z.AccessKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		case "ParentUser":
			z.ParentUser, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Audit) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "Version"
	err = en.Append(0x8b, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Time"
	err = en.Append(0xa4, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// write "Node"
	err = en.Append(0xa4, 0x4e, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Node)
	if err != nil {
		err = msgp.WrapError(err, "Node")
		return
	}
	// write "APIName"
	err = en.Append(0xa7, 0x41, 0x50, 0x49, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIName)
	if err != nil {
		err = msgp.WrapError(err, "APIName")
		return
	}
	// write "Bucket"
	err = en.Append(0xa6, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bucket)
	if err != nil {
		err = msgp.WrapError(err, "Bucket")
		return
	}
	// write "Tags"
	err = en.Append(0xa4, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001, za0002 := range z.Tags {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Tags")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "RequestID"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	// write "ReqClaims"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ReqClaims)))
	if err != nil {
		err = msgp.WrapError(err, "ReqClaims")
		return
	}
	for za0003, za0004 := range z.ReqClaims {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "ReqClaims")
			return
		}
		err = en.WriteIntf(za0004)
		if err != nil {
			err = msgp.WrapError(err, "ReqClaims", za0003)
			return
		}
	}
	// write "SourceHost"
	err = en.Append(0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.SourceHost)
	if err != nil {
		err = msgp.WrapError(err, "SourceHost")
		return
	}
	// write "AccessKey"
	err = en.Append(0xa9, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccessKey)
	if err != nil {
		err = msgp.WrapError(err, "AccessKey")
		return
	}
	// write "ParentUser"
	err = en.Append(0xaa, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.ParentUser)
	if err != nil {
		err = msgp.WrapError(err, "ParentUser")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Audit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "Version"
	o = append(o, 0x8b, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Version)
	// string "Time"
	o = append(o, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.Time)
	// string "Node"
	o = append(o, 0xa4, 0x4e, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.Node)
	// string "APIName"
	o = append(o, 0xa7, 0x41, 0x50, 0x49, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.APIName)
	// string "Bucket"
	o = append(o, 0xa6, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74)
	o = msgp.AppendString(o, z.Bucket)
	// string "Tags"
	o = append(o, 0xa4, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Tags)))
	for za0001, za0002 := range z.Tags {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "RequestID"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendString(o, z.RequestID)
	// string "ReqClaims"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ReqClaims)))
	for za0003, za0004 := range z.ReqClaims {
		o = msgp.AppendString(o, za0003)
		o, err = msgp.AppendIntf(o, za0004)
		if err != nil {
			err = msgp.WrapError(err, "ReqClaims", za0003)
			return
		}
	}
	// string "SourceHost"
	o = append(o, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.SourceHost)
	// string "AccessKey"
	o = append(o, 0xa9, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.AccessKey)
	// string "ParentUser"
	o = append(o, 0xaa, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72)
	o = msgp.AppendString(o, z.ParentUser)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Audit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Time":
			z.Time, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Node":
			z.Node, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Node")
				return
			}
		case "APIName":
			z.APIName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIName")
				return
			}
		case "Bucket":
			z.Bucket, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bucket")
				return
			}
		case "Tags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		case "ReqClaims":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqClaims")
				return
			}
			if z.ReqClaims == nil {
				z.ReqClaims = make(map[string]interface{}, zb0003)
			} else if len(z.ReqClaims) > 0 {
				for key := range z.ReqClaims {
					delete(z.ReqClaims, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 interface{}
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims")
					return
				}
				za0004, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReqClaims", za0003)
					return
				}
				z.ReqClaims[za0003] = za0004
			}
		case "SourceHost":
			z.SourceHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceHost")
				return
			}
		case "AccessKey":
			z.AccessKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		case "ParentUser":
			z.ParentUser, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentUser")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Audit) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Version) + 5 + msgp.TimeSize + 5 + msgp.StringPrefixSize + len(z.Node) + 8 + msgp.StringPrefixSize + len(z.APIName) + 7 + msgp.StringPrefixSize + len(z.Bucket) + 5 + msgp.MapHeaderSize
	if z.Tags != nil {
		for za0001, za0002 := range z.Tags {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 10 + msgp.StringPrefixSize + len(z.RequestID) + 10 + msgp.MapHeaderSize
	if z.ReqClaims != nil {
		for za0003, za0004 := range z.ReqClaims {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.GuessSize(za0004)
		}
	}
	s += 11 + msgp.StringPrefixSize + len(z.SourceHost) + 10 + msgp.StringPrefixSize + len(z.AccessKey) + 11 + msgp.StringPrefixSize + len(z.ParentUser)
	return
}
